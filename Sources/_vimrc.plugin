" Editor Plugin Config {@{
" Specify a directory for plugins
" - For Neovim: ~/.local/share/nvim/plugged
" - Avoid using standard Vim directory names like 'plugin'
if IsWindows()
    "Windows (PowerShell)
    "$uri = 'https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim'
    "(New-Object Net.WebClient).DownloadFile(
    "$uri,
    "$ExecutionContext.SessionState.Path.GetUnresolvedProviderPathFromPSPath(
    ""$VIM\vimfiles\autoload\plug.vim"
    ")
    ")
    call plug#begin('$VIM/vimfiles/plugged/')
else
    if empty(glob('~/.vim/autoload/plug.vim'))
        silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
                    \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
        autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
    endif
    call plug#begin('~/.vim/plugged')
endif

" Plugins {@{
" Make sure you use single quotes
Plug 'altercation/vim-colors-solarized'
Plug 'tomasr/molokai'
Plug 'vim-scripts/phd'
Plug 'lilydjwg/fcitx.vim'
Plug 'derekwyatt/vim-protodef'
Plug 'xolox/vim-misc'  " required by lua.vim, vim-session
" lisp support
Plug 'kovisoft/slimv'
" lua support, reference: https://blog.csdn.net/ding_yingzi/article/details/81517401
" Plug 'tbastos/vim-lua'  TODO: conflict with ycm
" Plug 'xolox/vim-lua-inspect'  TODO: cause error
" Plug 'xolox/vim-lua-ftplugin'  TODO: conflict with ycm
" golang support, reference: https://blog.csdn.net/zhang197093/article/details/78559903?locationNum=5&fps=1
Plug 'fatih/vim-go'
Plug 'nsf/gocode', {'rtp': 'vim/'}
" markdown support
Plug 'godlygeek/tabular'
Plug 'plasticboy/vim-markdown'
Plug 'suan/vim-instant-markdown', { 'for': 'markdown', 'do': 'pip3 install --user smdv' }
" If you don't have nodejs and yarn
" use pre build
" Plug 'iamcco/markdown-preview.nvim', { 'do': { -> mkdp#util#install() } }
" latex support
" TODO: vimtex does't work on windows
" Plug 'lervag/vimtex'
Plug 'LaTeX-Box-Team/LaTeX-Box'
" version control
Plug 'tpope/vim-fugitive'
Plug 'junegunn/gv.vim'
Plug 'mhinz/vim-signify'
Plug 'samoshkin/vim-mergetool'
Plug 'airblade/vim-gitgutter'
" editor
Plug 'luochen1990/rainbow'
Plug 'easymotion/vim-easymotion'
Plug 'andymass/vim-matchup'
Plug 'qstrahl/vim-matchmaker'
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
Plug 'enricobacis/vim-airline-clock'
Plug 'mattn/webapi-vim'
Plug 'thaerkh/vim-workspace'
Plug 'farmergreg/vim-lastplace'
Plug 'mbbill/undotree'
Plug 'xolox/vim-session'
Plug 'ryanoasis/vim-devicons'
Plug 'scrooloose/nerdtree'
Plug 'Xuyuanp/nerdtree-git-plugin'
Plug 'tiagofumo/vim-nerdtree-syntax-highlight'
Plug 'terryma/vim-multiple-cursors'
Plug 'MattesGroeger/vim-bookmarks'
" Plugin 'lyokha/vim-xkbswitch'
Plug 'derekwyatt/vim-fswitch'
Plug 's3rvac/AutoFenc'  " 文件编码检测
Plug 'Shougo/context_filetype.vim'  " 文件类型检测
Plug 'kana/vim-textobj-user'
Plug 'thinca/vim-quickrun'
Plug 'osyo-manga/vim-precious'
Plug 'junegunn/goyo.vim'
Plug 'junegunn/limelight.vim'
Plug 'liuchengxu/vim-clap'  " generic interactive finder and dispatcher
" 高亮复制的区域
Plug 'kana/vim-operator-user'
Plug 'haya14busa/vim-operator-flashy'
Plug 'mhinz/vim-startify'  " start screen
Plug 'makerj/vim-pdf'
" text
Plug 'lfv89/vim-interestingwords'
Plug 'itchyny/vim-cursorword'
Plug 'wellle/targets.vim'
" codes
Plug 'w0rp/ale'
" coc, ycm can replace each other
" Plug 'neoclide/coc.nvim', {'branch': 'release'}
Plug 'ycm-core/YouCompleteMe', { 'do': 'python3 install.py' }
Plug 'rdnetto/YCM-Generator', { 'branch': 'stable' }
Plug 'Chiel92/vim-autoformat'  " 格式化，排版
Plug 'prettier/vim-prettier', { 'do': 'yarn install' }  " post install (yarn install | npm install)
Plug 'hotoo/pangu.vim'
Plug 'junegunn/vim-easy-align'
Plug 'justinmk/vim-syntax-extra'  " 语法高亮
Plug 'sheerun/vim-polyglot'  " 语法高亮包
Plug 'octol/vim-cpp-enhanced-highlight'
Plug 'Shougo/echodoc.vim'
Plug 'tpope/vim-surround'
Plug 'scrooloose/nerdcommenter'  " 注释
Plug 'vim-scripts/DoxygenToolkit.vim'
Plug 'Yggdroot/indentLine'  " 对齐线
" matchparen++.vim, vim-parenmatch can replace each other
" Plug 'https://www.vim.org/scripts/script.php?script_id=2059'  " matchparen++, 高亮光标当前所在括号对
Plug 'Yggdroot/hiPairs'
Plug 'itchyny/vim-parenmatch'
Plug 'jiangmiao/auto-pairs'
Plug 'mh21/errormarker.vim'
" TODO: cause errors!
" Plug 'SirVer/ultisnips'  " https://www.jianshu.com/p/c0ba049878ca
" Plug 'honza/vim-snippets'
Plug 'AndrewRadev/splitjoin.vim'
Plug 'AndrewRadev/quickpeek.vim'
Plug 'AndrewRadev/tagalong.vim'
Plug 'christoomey/vim-sort-motion'  " 排序
" TODO: cause errors!
" Plug 'obreitwi/vim-sort-folds'
Plug 'chiedo/vim-sort-blocks-by'
Plug 'FooSoft/vim-argwrap'
" string search and replace
Plug 'mileszs/ack.vim'
Plug 'dyng/ctrlsf.vim'
Plug 'dkprice/vim-easygrep'
Plug 'haya14busa/vim-asterisk'  " visual模式下*/#功能
Plug 'haya14busa/incsearch.vim'
" tags search
" ctags, gtags是基于符号的查找，存在误差，可以使用coc，ycm等基于语义的搜索
Plug 'ludovicchabant/vim-gutentags'  " 定义跳转，查找引用
Plug 'skywind3000/gutentags_plus'
Plug 'skywind3000/vim-preview'
" ctrlp, fzf, leaderf can replace each other
" Plug 'ctrlpvim/ctrlp.vim'
" Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
" Plug 'junegunn/fzf.vim'
if IsWindows()
    Plug 'Yggdroot/LeaderF', { 'do': '.\install.bat' }
else
    Plug 'Yggdroot/LeaderF', { 'do': './install.sh' }
end
Plug 'brookhong/cscope.vim'
Plug 'majutsushi/tagbar'
" compiler and debuger
Plug 'xuhdev/SingleCompile'
Plug 'Shougo/vimproc.vim'
Plug 'idanarye/vim-vebugger'
" terminal
Plug 'Shougo/deol.nvim'
Plug 'godlygeek/csapprox'
Plug 'skywind3000/vim-terminal-help'
" tools
Plug 'segeljakt/vim-silicon'  " 图片
Plug 'ashisha/image.vim'
Plug 'voldikss/vim-translator'  " 翻译
Plug 'itchyny/calendar.vim'  " 日历
" TODO: cause errors!
" Plug 'Wildog/airline-weather.vim'
" others
Plug 'skywind3000/asyncrun.vim'
" }@}
" Initialize plugin system
call plug#end()

" NERDTree {@{
" reference: https://segmentfault.com/a/1190000015143474

" TODO: should be async
" NOTE: conflict vim-startify
" 在 vim 启动的时候默认开启 NERDTree（autocmd 可以缩写为 au）
" autocmd VimEnter * NERDTree

" 将 NERDTree 的窗口设置在 vim 窗口的右侧（默认为左侧）
let NERDTreeWinPos ="right"
" 当打开 NERDTree 窗口时，自动显示 Bookmarks
let NERDTreeShowBookmarks =1
" 显示行号
let NERDTreeShowLineNumbers =1
let NERDTreeAutoCenter =1
" 是否显示隐藏文件
let NERDTreeShowHidden =1
" NERDTree 子窗口中不显示冗余帮助信息
let NERDTreeMinimalUI =1
" 删除文件时自动删除文件对应 buffer
let NERDTreeAutoDeleteBuffer =1

" vim不指定具体文件打开是，自动使用nerdtree
autocmd StdinReadPre * let s:std_in =1
" NOTE: conflict vim-startify
" autocmd VimEnter * if argc() == 0 && !exists("s:std_in") | NERDTree | endif

" 当vim打开一个目录时，nerdtree自动使用
autocmd StdinReadPre * let s:std_in =1
autocmd VimEnter * if argc() == 1 && isdirectory(argv()[0]) && !exists("s:std_in") | exe 'NERDTree' argv()[0] | wincmd p | ene | endif
" 当vim中没有其他文件，只剩下nerdtree的时候，自动关闭窗口
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif
" }@}

" NerdtreeGitPlugin {@{
let g:NERDTreeIndicatorMapCustom ={
            \ "Modified"  : "*",
            \ "Staged"    : "+",
            \ "Untracked" : "☆",
            \ "Renamed"   : "→",
            \ "Unmerged"  : "=",
            \ "Deleted"   : "X",
            \ "Dirty"     : "x",
            \ "Clean"     : "√",
            \ "Ignored"   : "◎",
            \ "Unknown"   : "?"
            \ }
" }@}

" YouCompleteMe {@{
" references: https://www.jianshu.com/p/4fea42514eaa
"             https://www.zhihu.com/question/25437050/answer/95662340
"             https://zhuanlan.zhihu.com/p/33046090
let g:ycm_server_keep_logfiles = 1
let g:ycm_server_log_level = 'info'

" YCM 补全菜单配色，https://jonasjacek.github.io/colors/
" 菜单
highlight Pmenu ctermfg=2 ctermbg=3 guifg=#005f87 guibg=#EEE8D5
" 选中项
highlight PmenuSel ctermfg=2 ctermbg=3 guifg=#afd700 guibg=#106900
" YCM 集成 OmniCppComplete 补全引擎，设置其快捷键
inoremap <leader>; <C-x><C-o>

" 触发语义补全
let g:ycm_key_invoke_completion = '<c-z>'
noremap <c-z> <NOP>
" 自动补全配置
" 函数原型预览窗口
set completeopt=menu,menuone
" 补全预览
let g:ycm_add_preview_to_completeopt = 1
" YCM的诊断信息
let g:ycm_show_diagnostics_ui = 1

autocmd InsertLeave * if pumvisible() == 0|pclose|endif "离开插入模式后自动关闭预览窗口 
inoremap <expr> <CR> pumvisible() ? "\<C-y>" : "\<CR>"    "回车即选中当前项  

" 追加语义触发的条件
let g:ycm_semantic_triggers =  {
			\ 'c,cpp,python,java,go,erlang,perl': ['re!\w{2}'],
			\ 'cs,lua,javascript': ['re!\w{2}'],
			\ }

" 上下选择，没有这个会拦截掉tab, 导致其他插件的tab不能用
let g:ycm_key_list_select_completion   = ['<c-n>', '<Down>']
let g:ycm_key_list_previous_completion = ['<c-p>', '<Up>']
"关闭加载.ycm_extra_conf.py提示
let g:ycm_confirm_extra_conf=0

let g:ycm_min_num_identifier_candidate_chars = 2
"在注释输入中也能补全  
let g:ycm_complete_in_comments = 1  
"在字符串输入中也能补全  
let g:ycm_complete_in_strings = 1  
"注释和字符串中的文字也会被收入补全  
let g:ycm_collect_identifiers_from_comments_and_strings = 1
let g:clang_user_options='|| exit 0'  
"" 开启 YCM 标签补全引擎
let g:ycm_collect_identifiers_from_tags_files=1
" 语法关键字补全
let g:ycm_seed_identifiers_with_syntax=1
" 禁止缓存匹配项，每次都重新生成匹配项
let g:ycm_cache_omnifunc=0
" 从第一个键入字符就开始罗列匹配项
let g:ycm_min_num_of_chars_for_completion=1

if IsWindows()
  " 需要配置环境变量
  let g:ycm_server_python_interpreter = $PYTHON.'/python.exe'
  let g:ycm_global_ycm_extra_conf='$VIM/vimfiles/plugged/YouCompleteMe/.ycm_extra_conf.py'
else
  let g:ycm_server_python_interpreter='/usr/bin/python'
  let g:ycm_global_ycm_extra_conf='~/.vim/plugged/YouCompleteMe/.ycm_extra_conf.py'
endif 
" }@}

" Slimv {@{
if IsWindows()
  let g:slimv_swank_cmd ='!start "D:/Develop/ccl19/wx86cl.exe" -l ' . '$VIM/vimfiles/plugged/slimv/slime/start-swank.lisp'
  "let g:slimv_swank_cmd ='!start "D:/Develop/Steel Bank Common Lisp/1.3.1/sbcl.exe" --load ' . '$VIM/vimfiles/plugged/slimv/slime/start-swank.lisp'
else
  let g:slimv_swank_cmd ='! xterm -e sbcl --load /usr/share/common-lisp/source/slime/start-swank.lisp &'
endif

" enabled rainbow parenthesis
let g:lisp_rainbow =1

let g:slimv_leader =','

let g:paredit_mode =0

let g:paredit_electric_return =1
" }@}

" Ack {@{
" references: https://blog.csdn.net/Demorngel/article/details/71147697
" 调用rg进行搜索, https://segmentfault.com/a/1190000016170184
if executable('rg')
    let g:ackprg = 'rg --vimgrep'
endif
" 调用ag进行搜索
"if executable('ag')
"    let g:ackprg = 'ag --vimgrep'
"endif
let g:ackhighlight = 1
" }@}

" CtrlSF {@{
let g:ctrlsf_search_mode = 'async'
let g:ctrlsf_winsize = "20%"
" }@}

" Ale {@{
" references: https://blog.csdn.net/Demorngel/article/details/69052789
"始终开启标志列
let g:ale_sign_column_always = 1
let g:ale_set_highlights = 0
"显示Linter名称,出错或警告等相关信息
let g:ale_echo_msg_error_str = 'E'
let g:ale_echo_msg_warning_str = 'W'
let g:ale_echo_msg_format = '[%linter%] %s [%severity%]'

let g:ale_java_javac_options = '-encoding UTF-8  -J-Duser.language=en'

let g:ale_linters_explicit = 1
let g:ale_completion_delay = 500
let g:ale_echo_delay = 20
let g:ale_lint_delay = 500
let g:ale_echo_msg_format = '[%linter%] %code: %%s'
let g:ale_lint_on_text_changed = 'normal'
let g:ale_lint_on_insert_leave = 1
let g:airline#extensions#ale#enabled = 1

let g:ale_c_gcc_options = '-Wall -O2 -std=c99'
let g:ale_cpp_gcc_options = '-Wall -O2 -std=c++14'
let g:ale_c_cppcheck_options = ''
let g:ale_cpp_cppcheck_options = ''
let g:ale_sign_error = "\ue009\ue009"
hi! clear SpellBad
hi! clear SpellCap
hi! clear SpellRare
hi! SpellBad gui=undercurl guisp=red
hi! SpellCap gui=undercurl guisp=blue
hi! SpellRare gui=undercurl guisp=magenta
" 格式化代码，需要自行配置
autocmd FileType python noremap <buffer> <leader>cpf :ALEFix<CR>
let g:ale_fixers = {
\ 'python': ['add_blank_lines_for_python_control_statements','autopep8','isort','yapf','remove_trailing_lines','trim_whitespace'],
\}
" }@}

" rainbow {@{
let g:rainbow_active = 1 "0 if you want to enable it later via :RainbowToggle
let g:rainbow_conf = {
            \ 'guifgs': ['royalblue3', 'darkorange3', 'seagreen3', 'firebrick'],
            \ 'ctermfgs': ['lightblue', 'lightyellow', 'lightcyan', 'lightmagenta'],
            \ 'operators': '_,_',
            \ 'parentheses': ['start=/(/ end=/)/ fold', 'start=/\[/ end=/\]/ fold', 'start=/{/ end=/}/ fold'],
            \ 'separately': {
            \   '*': {},
            \   'tex': {
            \     'parentheses': ['start=/(/ end=/)/', 'start=/\[/ end=/\]/'],
            \   },
            \   'lisp': {
            \     'guifgs': ['royalblue3', 'darkorange3', 'seagreen3', 'firebrick', 'darkorchid3'],
            \   },
            \   'vim': {
            \     'parentheses': ['start=/(/ end=/)/', 'start=/\[/ end=/\]/', 'start=/{/ end=/}/ fold', 'start=/(/ end=/)/ containedin=vimFuncBody', 'start=/\[/ end=/\]/ containedin=vimFuncBody', 'start=/{/ end=/}/ fold containedin=vimFuncBody'],
            \   },
            \   'html': {
            \     'parentheses': ['start=/\v\<((area|base|br|col|embed|hr|img|input|keygen|link|menuitem|meta|param|source|track|wbr)[ >])@!\z([-_:a-zA-Z0-9]+)(\s+[-_:a-zA-Z0-9]+(\=("[^"]*"|'."'".'[^'."'".']*'."'".'|[^ '."'".'"><=`]*))?)*\>/ end=#</\z1># fold'],
            \   },
            \   'css': 0,
            \ }
            \}
" devicons may be conflit with rainbow plugin
let g:rainbow_conf = {
            \    'separately': {
            \       'nerdtree': 0
            \    }
            \}
" }@}

" incsearch {@{
map /  <Plug>(incsearch-forward)
map ?  <Plug>(incsearch-backward)
map g/ <Plug>(incsearch-stay)

" :h g:incsearch#auto_nohlsearch
set hlsearch
let g:incsearch#auto_nohlsearch = 1
map n  <Plug>(incsearch-nohl-n)
map N  <Plug>(incsearch-nohl-N)
" TODO: conflict with vim-asterisk
" map *  <Plug>(incsearch-nohl-*)
" map #  <Plug>(incsearch-nohl-#)
" map g* <Plug>(incsearch-nohl-g*)
" map g# <Plug>(incsearch-nohl-g#)
" }@}

" easymotion {@{
" <Leader>f{char} to move to {char}
map  <Leader>f <Plug>(easymotion-bd-f)
nmap <Leader>f <Plug>(easymotion-overwin-f)

" s{char}{char} to move to {char}{char}
nmap s <Plug>(easymotion-overwin-f2)

" Move to line
map <Leader>L <Plug>(easymotion-bd-jk)
nmap <Leader>L <Plug>(easymotion-overwin-line)

" Move to word
map  <Leader>w <Plug>(easymotion-bd-w)
nmap <Leader>w <Plug>(easymotion-overwin-w)
" }@}

" matchup {@{
let g:loaded_matchit = 1
" }@}

" matchmaker {@{
let g:matchmaker_enable_startup = 1
let g:matchmaker_ignore_single_match = 1
let g:matchmaker_matchpriority = 0
" }@}

" vim-gutentags {@{
" references: https://zhuanlan.zhihu.com/p/36279445

" TODO: 有时候gtags不能生成成功，可能项目目录下存在不能读的文件，可以手动执行gtags查看输出
" https://github.com/ludovicchabant/vim-gutentags/issues/225

" gtags 是支持使用 ctags/universal-ctags 或者 pygments 来作为分析前端支持 50+ 种语言
" pip install pygments

" 告诉 gtags 默认 C/C++/Java 等六种原生支持的代码直接使用 gtags 本地分析器，而其他语言使用 pygments 模块
let $GTAGSLABEL = 'native-pygments'
" 必须设置，否则会找不到 native-pygments 和 language map 的定义
let $GTAGSCONF = expand('$VIM/../gtags/share/gtags/gtags.conf')
" let $GTAGSCONF = 'E:\Develop\TextEditor\gtags\share\gtags\gtags.conf'

" 允许 gutentags 打开一些高级命令和选项
let g:gutentags_define_advanced_commands = 1

" gutentags 搜索工程目录的标志，碰到这些文件/目录名就停止向上一级目录递归
let g:gutentags_project_root = ['.root', '.svn', '.git', '.hg', '.project']

" 所生成的数据文件的名称
let g:gutentags_ctags_tagfile = '.tags'

" 同时开启 ctags 和 gtags 支持：
let g:gutentags_modules = []
if executable('ctags')
	let g:gutentags_modules += ['ctags']
endif
if executable('gtags-cscope') && executable('gtags')
  let g:gutentags_modules += ['gtags_cscope']
endif

" 将自动生成的 tags/gtags 文件全部放入 .vim/.cache/tags 目录中，避免污染工程目录
if IsWindows()
  let s:vim_tags = expand('$VIM/.cache/tags')
else
  let s:vim_tags = expand('~/.vim/.cache/tags')
endif
let g:gutentags_cache_dir = s:vim_tags

" 检测 tags目录 不存在就新建
if !isdirectory(s:vim_tags)
  silent! call mkdir(s:vim_tags, 'p')
endif

" 配置 ctags 的参数，老的 Exuberant-ctags 不能有 --extra=+q，注意
let g:gutentags_ctags_extra_args = ['--fields=+niazS', '--extra=+q']
let g:gutentags_ctags_extra_args += ['--c++-kinds=+px']
let g:gutentags_ctags_extra_args += ['--c-kinds=+px']

" 如果使用 universal ctags 需要增加下面一行，老的 Exuberant-ctags 不能加下一行
let g:gutentags_ctags_extra_args += ['--output-format=e-ctags']

" 禁用 gutentags 自动加载 gtags 数据库的行为
let g:gutentags_auto_add_gtags_cscope = 0
" }@}

" gutentags_plus {@{
" change focus to quickfix window after search (optional).
let g:gutentags_plus_switch = 1

" disable the default keymap
let g:gutentags_plus_nomap = 1

noremap <silent> <leader>gs :GscopeFind s <C-R><C-W><cr>
noremap <silent> <leader>gg :GscopeFind g <C-R><C-W><cr>
noremap <silent> <leader>gd :GscopeFind d <C-R><C-W><cr>
noremap <silent> <leader>gc :GscopeFind c <C-R><C-W><cr>
noremap <silent> <leader>gt :GscopeFind t <C-R><C-W><cr>
noremap <silent> <leader>ge :GscopeFind e <C-R><C-W><cr>
noremap <silent> <leader>gf :GscopeFind f <C-R>=expand("<cfile>")<cr><cr>
noremap <silent> <leader>gi :GscopeFind i <C-R>=expand("<cfile>")<cr><cr>
noremap <silent> <leader>ga :GscopeFind a <C-R><C-W><cr>

" VAX shortcut styles
" alt + [shift] + f/g
if IsMac()
    " NOTE: can't map alt in mac: https://www.cnblogs.com/yanyichao/p/4026626.html
    noremap Ï :GscopeFind s <C-R><C-W><cr>
    noremap © :GscopeFind g <C-R><C-W><cr>
else
    noremap <M-F> :GscopeFind s <C-R><C-W><cr>
    noremap <M-g> :GscopeFind g <C-R><C-W><cr>
endif
" }@}

" leaderf {@{
" don't show the help in normal mode
let g:Lf_HideHelp = 1
let g:Lf_UseCache = 0
let g:Lf_UseVersionControlTool = 0
let g:Lf_IgnoreCurrentBufferName = 1

" popup mode
let g:Lf_WindowPosition = 'popup'
let g:Lf_PreviewInPopup = 1
let g:Lf_PopupShowStatusline = 1
" let g:Lf_StlSeparator = { 'left': "\ue0b0", 'right': "\ue0b2", 'font': "DejaVu Sans Mono for Powerline" }
let g:Lf_StlSeparator = { 'left': "\ue0b0", 'right': "\ue0b2", 'font': "" }
let g:Lf_PreviewResult = {'Function': 0, 'BufTag': 0 }

" let g:Lf_ShortcutF = '<leader>lff'
" noremap <leader>lfu :LeaderfFunction<cr>
noremap <leader>lff :<C-U><C-R>=printf("Leaderf file %s --nowrap", "")<CR><CR>
noremap <leader>lfm :<C-U><C-R>=printf("Leaderf mru %s --nowrap", "")<CR><CR>
noremap <leader>lfb :<C-U><C-R>=printf("Leaderf buffer %s --nowrap", "")<CR><CR>
noremap <leader>lft :<C-U><C-R>=printf("Leaderf bufTag %s --nowrap", "")<CR><CR>
noremap <leader>lfu :<C-U><C-R>=printf("Leaderf function %s --nowrap", "")<CR><CR>
noremap <leader>lfl :<C-U><C-R>=printf("Leaderf line %s --nowrap", "")<CR><CR>

" VAX shortcut styles
" alt + [shift] + o/r/s/m
if IsMac()
    " NOTE: can't map alt in mac: https://www.cnblogs.com/yanyichao/p/4026626.html
    noremap Ø :<C-U><C-R>=printf("Leaderf file %s --nowrap", "")<CR><CR>
    noremap ‰ :<C-U><C-R>=printf("Leaderf mru %s --nowrap", "")<CR><CR>
    noremap ı :<C-U><C-R>=printf("Leaderf buffer %s --nowrap", "")<CR><CR>
    noremap Í :<C-U><C-R>=printf("Leaderf bufTag %s --nowrap", "")<CR><CR>
    noremap µ :<C-U><C-R>=printf("Leaderf function %s --bottom --nowrap", "")<CR><CR>
    inoremap Ø <esc>:<C-U><C-R>=printf("Leaderf file %s --nowrap", "")<CR><CR>
    inoremap ‰ <esc>:<C-U><C-R>=printf("Leaderf mru %s --nowrap", "")<CR><CR>
    inoremap ı <esc>:<C-U><C-R>=printf("Leaderf buffer %s --nowrap", "")<CR><CR>
    inoremap Í <esc>:<C-U><C-R>=printf("Leaderf bufTag %s --nowrap", "")<CR><CR>
    inoremap µ <esc>:<C-U><C-R>=printf("Leaderf function %s --bottom --nowrap", "")<CR><CR>
else
    noremap <M-O> :<C-U><C-R>=printf("Leaderf file %s --nowrap", "")<CR><CR>
    noremap <M-R> :<C-U><C-R>=printf("Leaderf mru %s --nowrap", "")<CR><CR>
    noremap <M-B> :<C-U><C-R>=printf("Leaderf buffer %s --nowrap", "")<CR><CR>
    noremap <M-S> :<C-U><C-R>=printf("Leaderf bufTag %s --nowrap", "")<CR><CR>
    noremap <M-m> :<C-U><C-R>=printf("Leaderf function %s --bottom --nowrap", "")<CR><CR>
    inoremap <M-O> <esc>:<C-U><C-R>=printf("Leaderf file %s --nowrap", "")<CR><CR>
    inoremap <M-R> <esc>:<C-U><C-R>=printf("Leaderf mru %s --nowrap", "")<CR><CR>
    inoremap <M-B> <esc>:<C-U><C-R>=printf("Leaderf buffer %s --nowrap", "")<CR><CR>
    inoremap <M-S> <esc>:<C-U><C-R>=printf("Leaderf bufTag %s --nowrap", "")<CR><CR>
    inoremap <M-m> <esc>:<C-U><C-R>=printf("Leaderf function %s --bottom --nowrap", "")<CR><CR>
endif

noremap <C-B> :<C-U><C-R>=printf("Leaderf! rg --current-buffer -e %s ", expand("<cword>"))<CR>
noremap <C-F> :<C-U><C-R>=printf("Leaderf! rg -e %s ", expand("<cword>"))<CR>
" search visually selected text literally
xnoremap gf :<C-U><C-R>=printf("Leaderf! rg -F -e %s ", leaderf#Rg#visual())<CR>
noremap go :<C-U>Leaderf! rg --recall<CR>

" should use `Leaderf gtags --update` first
let g:Lf_GtagsAutoGenerate = 0
let g:Lf_Gtagslabel = 'native-pygments'
noremap <leader>lfr :<C-U><C-R>=printf("Leaderf! gtags -r %s --auto-jump", expand("<cword>"))<CR><CR>
noremap <leader>lfd :<C-U><C-R>=printf("Leaderf! gtags -d %s --auto-jump", expand("<cword>"))<CR><CR>
noremap <leader>lfo :<C-U><C-R>=printf("Leaderf! gtags --recall %s", "")<CR><CR>
noremap <leader>lfn :<C-U><C-R>=printf("Leaderf gtags --next %s", "")<CR><CR>
noremap <leader>lfp :<C-U><C-R>=printf("Leaderf gtags --previous %s", "")<CR><CR>

let g:Lf_RootMarkers = ['.project', '.root', '.svn', '.git']
let g:Lf_WorkingDirectoryMode = 'Ac'
let g:Lf_WindowHeight = 0.30
if IsWindows()
let g:Lf_CacheDirectory = expand('~/.vim/cache')
else
let g:Lf_CacheDirectory = expand($VIM.'/vimfiles/cache')
endif
let g:Lf_ShowRelativePath = 0
let g:Lf_StlColorscheme = 'powerline'
let g:Lf_UseMemoryCache = 0
" }@}

" airline {@{
" reference: https://www.jianshu.com/p/310368097c75
"            https://mounui.com/331.html
" 这个是安装字体后 必须设置此项"
let g:airline_powerline_fonts = 1
if !exists('g:airline_symbols')
    let g:airline_symbols={}
endif
" 打开tabline功能
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#buffer_nr_show = 1
let g:airline#extensions#tabline#left_sep = ' '
let g:airline#extensions#tabline#left_alt_sep = '|'
let g:airline#extensions#tabline#formatter = 'default'
" 关闭状态显示空白符号计数
let g:airline#extensions#whitespace#enabled = 0
let g:airline#extensions#whitespace#symbol = '!'
set lazyredraw

" Vim 在与屏幕/键盘交互时使用的编码(取决于实际的终端的设定)
set langmenu=zh_CN.UTF-8
" 设置打开文件的编码格式
set fileencodings=ucs-bom,utf-8,cp936,gb18030,big5,euc-jp,euc-kr,latin1
set fileencoding=utf-8
" 设置中文帮助
set helplang=cn
" 设置字体
"set guifont=Powerline_Consolas:h16
" }@}

" airline-themes {@{
let g:airline_theme='solarized'
let g:airline_solarized_bg='dark'
" }@}

" autoformat {@{
" references: https://blog.csdn.net/demorngel/article/details/69053613
" TODO: should be async
"au BufWrite * :Autoformat
noremap <leader>cf :Autoformat<CR>
" }@}

" echodoc {@{
" you could disable showmode alltogether.
set noshowmode
let g:echodoc_enable_at_startup = 1
" }@}

" nerdtree-syntax-highlight {@{
" highlight full name (not only icons)
let g:NERDTreeFileExtensionHighlightFullName = 1
let g:NERDTreeExactMatchHighlightFullName = 1
let g:NERDTreePatternMatchHighlightFullName = 1
" highlight folders using exact match
let g:NERDTreeHighlightFolders = 1 " enables folder icon highlighting using exact match
let g:NERDTreeHighlightFoldersFullName = 1 " highlights the folder name
" }@}

" vim-devicons {@{
"set guifont=Monoid_Nerd_Font:h16
set guifont=DroidSansMono_Nerd_Font:h16
let g:webdevicons_enable_startify = 1
" }@}

" airline-weather {@{
let g:weather#area = 'chengducity,ch'
let g:weather#unit = 'metric'
" }@}

" easy-align {@{
vmap <leader>ca <Plug>(EasyAlign)
nmap <leader>ca <Plug>(EasyAlign)
if !exists('g:easy_align_delimiters')
  let g:easy_align_delimiters = {}
endif
let g:easy_align_delimiters['#'] = { 'pattern': '#', 'ignore_groups': ['String'] }
" }@}

" indentLine {@{
let g:indentLine_enabled = 1
let g:indentLine_leadingSpaceEnabled = 0
let g:indentLine_char_list = ['|', '¦', '┆', '┊']
let g:indentLine_fileTypeExclude  = ['startify', 'nerdtree', 'tagbar']  " ignore plugins
let g:indentLine_fileTypeExclude += ['text', 'sh']  " ignore files
let g:indentLine_bufTypeExclude   = ['help', 'terminal']  " ignore buffers
let g:indentLine_faster = 1

map <leader>ilt :IndentLinesToggle<CR>
map <leader>ist :LeadingSpaceToggle<CR>

function! SwitchIndentLine()
  if &filetype == 'python' || &filetype == 'lisp'
    :IndentLinesDisable
    :LeadingSpaceEnable
  endif
endfunction
autocmd BufEnter * call SwitchIndentLine()
" }@}

" context_filetype {@{
function! s:checker(filename)
	try
		let pos = getpos(".")
		let filetype_pattern = '`\w\+`'
		let result = ""

		normal! gg0
		while search(filetype_pattern, 'W')
			if context_filetype#get_filetype() !=# expand('<cword>')
				let result .= printf("%s:%d: bad context filetype\n", a:filename, line('.'))
			endif
		endwhile

		cgetexpr result
		cwindo
	finally
		call setpos(".", pos)
	endtry
endfunction

command! ContextFiletypeTest call s:checker(expand("%:p"))
" }@}

" precious {@{
let g:precious_enable_switch_CursorMoved = {
      \	"*" : 1
      \}
let g:precious_enable_switch_CursorMoved_i = {
      \	"*" : 1
      \}

let g:precious_enable_switchers = {
      \	"*" : {
      \		"setfiletype" : 1
      \	},
      \}

nmap <Space>q <Plug>(precious-quickrun-op)
omap ic <Plug>(textobj-precious-i)
vmap ic <Plug>(textobj-precious-i)

augroup test0
  autocmd!
  autocmd InsertEnter * :PreciousSwitch
  autocmd InsertLeave * :PreciousReset
augroup END

augroup test1
  autocmd!
  autocmd User PreciousFileType let &l:syntax = precious#context_filetype()
augroup END

" TODO: must set filetype=vim
augroup test2
	autocmd!
	autocmd User PreciousFileType      :echo precious#context_filetype()
	autocmd User PreciousFiletype_ruby :PreciousSetContextLocal tabstop=8
augroup END

augroup precious-indentLine
  autocmd!
  autocmd User PreciousFileType IndentLinesReset
augroup END
" }@}

" quickrun {@{
let g:quickrun_config = {
\   "_" : {
\       "outputter" : "message",
\   },
\}
let g:quickrun_no_default_key_mappings = 1
nmap <leader>qr <Plug>(quickrun)
" }@}

" nerdcommenter {@{
" 默认：
" <leader>cc 注释当前行和选中行
" <leader>cn 没有发现和\cc有区别
" <leader>c<空格> 如果被选区域有部分被注释，则对被选区域执行取消注释操作，其它情况执行反转注释操作
" <leader>cm 对被选区域用一对注释符进行注释，前面的注释对每一行都会添加注释
" <leader>ci 执行反转注释操作，选中区域注释部分取消注释，非注释部分添加注释
" <leader>cs 添加性感的注释，代码开头介绍部分通常使用该注释
" <leader>cy 添加注释，并复制被添加注释的部分
" <leader>c$ 注释当前光标到改行结尾的内容
" <leader>cA 跳转到该行结尾添加注释，并进入编辑模式
" <leader>ca 转换注释的方式，比如： /**/和//
" <leader>cl \cb 左对齐和左右对其，左右对其主要针对/**/
" <leader>cu 取消注释
" Add spaces after comment delimiters by default
let g:NERDSpaceDelims = 1

" Use compact syntax for prettified multi-line comments
let g:NERDCompactSexyComs = 1

" Align line-wise comment delimiters flush left instead of following code indentation
let g:NERDDefaultAlign = 'left'

" Set a language to use its alternate delimiters by default
let g:NERDAltDelims_java = 1

" Add your own custom formats or override the defaults
let g:NERDCustomDelimiters = { 'c': { 'left': '/**','right': '*/' } }

" Allow commenting and inverting empty lines (useful when commenting a region)
let g:NERDCommentEmptyLines = 1

" Enable trimming of trailing whitespace when uncommenting
let g:NERDTrimTrailingWhitespace = 1

" Enable NERDCommenterToggle to check all selected lines is commented or not 
let g:NERDToggleCheckAllLines = 1
map <leader>cc <plug>NERDCommenterComment
map <leader>ccu <plug>NERDCommenterUncomment
map <leader>ccf <plug>NERDCommenterSexy
map <leader>cct <plug>NERDCommenterToggle
" }@}

" tagbar {@{
let g:tagbar_type_lua = {
      \ 'ctagstype' : 'lua',
      \ 'kinds' : [
      \ 'm:modules:0:0',
      \ 'f:functions:0:1',
      \ 'v:locals:0:0'
      \ ],
      \ 'sort' : 0
      \ }
" }@}

" surround {@{
" 正常模式
" -----------
" ds  ： 删除包围
" cs  ： 修改包围
" ys  ： 添加包围
" yS  ： 添加包围并替换包围文本
" yss ： 添加一行包围
" ySs ： 添加包围内容独成一行
" ySS ： 添加包围内容独成一行
"
" 可视模式
" -----------
" s   ： 给选中内容添加包围
" S   ： 选中内容添加包围并独成一行
"
" 插入模式
" -----------
" <CTRL-s> ： 添加一个包围
" <CTRL-s><CTRL-s> ： 添加包围内容独成一行
" <CTRL-g>s ： 添加一个包围
" <CTRL-g>S ： 添加包围内容独成一行
" }@}

" easygrep {@{
" <Leader>vv  - Grep for the word under the cursor, match all occurences,
"               like |gstar|
" <Leader>vV  - Grep for the word under the cursor, match whole word, like
"               |star|
" <Leader>va  - Like vv, but add to existing list
" <Leader>vA  - Like vV, but add to existing list
" <Leader>vr  - Perform a global search on the word under the cursor
"               and prompt for a pattern with which to replace it.
" <Leader>vo  - Select the files to search in and set grep options
" <Leader>vy* - Invoke any option from the options explorer, where * is the
"               shortcut for that option.
"               e.g. <Leader>vyr - toggles recursion
"                    <Leader>vyb - sets buffer grepping mode
"                    etc.
" }@}

" errormarker {@{
nmap <Leader>emc :ErrorAtCursor<CR>
nmap <Leader>emr :RemoveErrorMarkers<CR>
" }@}

" vim-prettier {@{
nmap <Leader>py <Plug>(Prettier)
let g:prettier#exec_cmd_async = 1
" when running at every change you may want to disable quickfix
let g:prettier#quickfix_enabled = 0
let g:prettier#autoformat = 0
autocmd BufWritePre,TextChanged,InsertLeave *.js,*.jsx,*.mjs,*.ts,*.tsx,*.css,*.less,*.scss,*.json,*.graphql,*.md,*.vue,*.yaml,*.html PrettierAsync
" }@}

" vim-translator {@{
" Echo translation in the cmdline
nmap <silent> <Leader>tl <Plug>Translate
vmap <silent> <Leader>tl <Plug>TranslateV
" Display translation in a window
nmap <silent> <Leader>tlw <Plug>TranslateW
vmap <silent> <Leader>tlw <Plug>TranslateWV
" Replace the text with translation
nmap <silent> <Leader>tlr <Plug>TranslateR
vmap <silent> <Leader>tlr <Plug>TranslateRV
" }@}

" vim-asterisk {@{
let g:asterisk#keeppos = 1
map *   <Plug>(asterisk-*)
map #   <Plug>(asterisk-#)
map g*  <Plug>(asterisk-g*)
map g#  <Plug>(asterisk-g#)
map z*  <Plug>(asterisk-z*)
map gz* <Plug>(asterisk-gz*)
map z#  <Plug>(asterisk-z#)
map gz# <Plug>(asterisk-gz#)
" }@}

" vim-operator-flashy {@{
map y <Plug>(operator-flashy)
nmap Y <Plug>(operator-flashy)$
" }@}

" vim-preview {@{
autocmd FileType qf nnoremap <silent><buffer> p :PreviewQuickfix<cr>
autocmd FileType qf nnoremap <silent><buffer> P :PreviewClose<cr>

noremap <m-u> :PreviewScroll -1<cr>
noremap <m-d> :PreviewScroll +1<cr>
inoremap <m-u> <c-\><c-o>:PreviewScroll -1<cr>
inoremap <m-d> <c-\><c-o>:PreviewScroll +1<cr>

noremap <F4> :PreviewSignature!<cr>
inoremap <F4> <c-\><c-o>:PreviewSignature!<cr>
" }@}

" coc.nvim {@{
" if hidden is not set, TextEdit might fail.
set hidden

" Some servers have issues with backup files, see #649
set nobackup
set nowritebackup

" Better display for messages
set cmdheight=2

" You will have bad experience for diagnostic messages when it's default 4000.
set updatetime=300

" don't give |ins-completion-menu| messages.
set shortmess+=c

" always show signcolumns
set signcolumn=yes

" Use tab for trigger completion with characters ahead and navigate.
" Use command ':verbose imap <tab>' to make sure tab is not mapped by other plugin.
inoremap <silent><expr> <TAB>
      \ pumvisible() ? "\<C-n>" :
      \ <SID>check_back_space() ? "\<TAB>" :
      \ coc#refresh()
inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

" Use <c-space> to trigger completion.
inoremap <silent><expr> <c-space> coc#refresh()

" Use <cr> to confirm completion, `<C-g>u` means break undo chain at current position.
" Coc only does snippet and additional edit on confirm.
inoremap <expr> <cr> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"
" Or use `complete_info` if your vim support it, like:
" inoremap <expr> <cr> complete_info()["selected"] != "-1" ? "\<C-y>" : "\<C-g>u\<CR>"

" Use `[g` and `]g` to navigate diagnostics
nmap <silent> [g <Plug>(coc-diagnostic-prev)
nmap <silent> ]g <Plug>(coc-diagnostic-next)

" Remap keys for gotos
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)

" Use K to show documentation in preview window
nnoremap <silent> K :call <SID>show_documentation()<CR>

function! s:show_documentation()
  if (index(['vim','help'], &filetype) >= 0)
    execute 'h '.expand('<cword>')
  else
    call CocAction('doHover')
  endif
endfunction

" Highlight symbol under cursor on CursorHold
" autocmd CursorHold * silent call CocActionAsync('highlight')

" Remap for rename current word
nmap <leader>rn <Plug>(coc-rename)

" Remap for format selected region
xmap <leader>f  <Plug>(coc-format-selected)
nmap <leader>f  <Plug>(coc-format-selected)

augroup mygroup
  autocmd!
  " Setup formatexpr specified filetype(s).
  autocmd FileType typescript,json setl formatexpr=CocAction('formatSelected')
  " Update signature help on jump placeholder
  autocmd User CocJumpPlaceholder call CocActionAsync('showSignatureHelp')
augroup end

" Remap for do codeAction of selected region, ex: `<leader>aap` for current paragraph
xmap <leader>a  <Plug>(coc-codeaction-selected)
nmap <leader>a  <Plug>(coc-codeaction-selected)

" Remap for do codeAction of current line
nmap <leader>ac  <Plug>(coc-codeaction)
" Fix autofix problem of current line
nmap <leader>qf  <Plug>(coc-fix-current)

" Create mappings for function text object, requires document symbols feature of languageserver.
xmap if <Plug>(coc-funcobj-i)
xmap af <Plug>(coc-funcobj-a)
omap if <Plug>(coc-funcobj-i)
omap af <Plug>(coc-funcobj-a)

" Use <TAB> for select selections ranges, needs server support, like: coc-tsserver, coc-python
nmap <silent> <TAB> <Plug>(coc-range-select)
xmap <silent> <TAB> <Plug>(coc-range-select)

" Use `:Format` to format current buffer
command! -nargs=0 Format :call CocAction('format')

" Use `:Fold` to fold current buffer
command! -nargs=? Fold :call     CocAction('fold', <f-args>)

" use `:OR` for organize import of current buffer
command! -nargs=0 OR   :call     CocAction('runCommand', 'editor.action.organizeImport')

" Add status line support, for integration with other plugin, checkout `:h coc-status`
" set statusline^=%{coc#status()}%{get(b:,'coc_current_function','')}

" Using CocList
" Show all diagnostics
nnoremap <silent> <space>a  :<C-u>CocList diagnostics<cr>
" Manage extensions
nnoremap <silent> <space>e  :<C-u>CocList extensions<cr>
" Show commands
nnoremap <silent> <space>c  :<C-u>CocList commands<cr>
" Find symbol of current document
nnoremap <silent> <space>o  :<C-u>CocList outline<cr>
" Search workspace symbols
nnoremap <silent> <space>s  :<C-u>CocList -I symbols<cr>
" Do default action for next item.
nnoremap <silent> <space>j  :<C-u>CocNext<CR>
" Do default action for previous item.
nnoremap <silent> <space>k  :<C-u>CocPrev<CR>
" Resume latest coc list
nnoremap <silent> <space>p  :<C-u>CocListResume<CR>
" }@}

" vim-startify {@{
" used with nerdtree together, https://github.com/mhinz/vim-startify/issues/319
autocmd VimEnter *
      \   if !argc()
      \ |   Startify
      \ |   NERDTree
      \ |   wincmd w
      \ | endif

" used with vim-devicons together, https://github.com/mhinz/vim-startify/issues/307
function! StartifyEntryFormat()
  return 'WebDevIconsGetFileTypeSymbol(absolute_path) ." ". entry_path'
endfunction
" }@}

" vimtex {@{
" reference: https://blog.csdn.net/qyhaill/article/details/100832805
" https://blog.csdn.net/CY_TEC/article/details/89420263
" https://www.cnblogs.com/ouyangsong/p/9348175.html
" https://tex.stackexchange.com/questions/160253/latex-cannot-find-sty-files
" https://stackoverflow.com/questions/1390828/how-do-i-install-a-latex-sty-file-on-osx
" https://blog.csdn.net/tinktanker/article/details/79657429
" https://blog.csdn.net/qq_39187538/article/details/88021261
set conceallevel=1
let g:tex_flavor='latex'
let g:vimtex_compiler_progname = 'latexmk'
if IsWindows()
    let g:vimtex_view_method='SumatraPDF'
elseif IsMac()
    let g:vimtex_view_method='Skim'
else
    let g:vimtex_view_method='Zathura'
endif
let g:vimtex_quickfix_open_on_warning = 0
let g:vimtex_quickfix_mode=0
let g:tex_conceal='abdmg'
" }@}

" LaTeX-Box {@{
" TODO: async does't work
" let g:LatexBox_latexmk_async = 1
" TODO: continusly does't work
" let g:LatexBox_latexmk_preview_continuously = 1
" let g:LatexBox_quickfix = 2
let g:LatexBox_autojump = 1
" }@}

" vim-polyglot {@{
" disable LaTeX-Box, reference: https://github.com/lervag/vimtex/issues/1335
" TODO: vimtex does't work on windows
" let g:polyglot_disabled = ['latex']
" }@}

" vim-terminal-help {@{
if IsMac()
    " NOTE: can't map alt in mac: https://www.cnblogs.com/yanyichao/p/4026626.html
    let g:terminal_key = '≠'
endif
" }@}

" vim-instant-markdown {@{
nmap <leader>mdp :InstantMarkdownPreview
nmap <leader>mds :InstantMarkdownStop
" }@}

" markdown-preview {@{
nmap <leader>mdp <Plug>MarkdownPreview
nmap <leader>mds <Plug>StopMarkdownPreview
" }@}

" vim-session {@{
let g:session_autosave = 'no'
" }@}
" }@}
