" functions {@{
function! IsLinux()
    return (has('unix') && !has('macunix') && !has('win32unix'))
endfunction
function! IsWindows()
    return (has('win32') || has('win64'))
endfunction
function! IsOSX()
    return has('macunix')
endfunction

function! MyDiff()
    if IsWindows()
        let opt = '-a --binary '
        if &diffopt =~ 'icase' | let opt = opt . '-i ' | endif
        if &diffopt =~ 'iwhite' | let opt = opt . '-b ' | endif
        let arg1 = v:fname_in
        if arg1 =~ ' ' | let arg1 = '"' . arg1 . '"' | endif
        let arg2 = v:fname_new
        if arg2 =~ ' ' | let arg2 = '"' . arg2 . '"' | endif
        let arg3 = v:fname_out
        if arg3 =~ ' ' | let arg3 = '"' . arg3 . '"' | endif
        if $VIMRUNTIME =~ ' '
            if &sh =~ '\<cmd'
                if empty(&shellxquote)
                    let l:shxq_sav = ''
                    set shellxquote&
                endif
                let cmd = '"' . $VIMRUNTIME . '\diff"'
            else
                let cmd = substitute($VIMRUNTIME, ' ', '" ', '') . '\diff"'
            endif
        else
            let cmd = $VIMRUNTIME . '\diff'
        endif
        silent execute '!' . cmd . ' ' . opt . arg1 . ' ' . arg2 . ' > ' . arg3
        if exists('l:shxq_sav')
            let &shellxquote=l:shxq_sav
        endif
    endif
endfunction
set diffexpr=MyDiff()

function! OpenFileLocation()
    if IsWindows()
        if ( expand("%") != "" )
            execute "!start explorer /select, %"
        else
            execute "!start explorer /select, %:p:h"
        endif
    endif
endfunction
" }@}

"""""""""""""""""""" custom configuration """"""""""""""""""""
"
" references: https://github.com/wsdjeg/vim-galore-zh_cn
"             https://github.com/yangyangwithgnu/use_vim_as_ide
"             https://github.com/spf13/spf13-vim
"             https://www.jianshu.com/p/923aec861af3(for mac)
"             https://www.zhihu.com/question/47691414

" General Config {@{
if IsWindows()
    source $VIMRUNTIME/vimrc_example.vim
    source $VIMRUNTIME/mswin.vim
    behave mswin
endif

" dos和unix格式：https://blog.csdn.net/lovelirui/article/details/6282940
" 如果你使用windows上的vim，并且希望你的会话文件可以同时被windows版本的vim和UNIX版本的vim共同使用的话，
" 在‘sessionoptions’中加入‘slash’和‘unix’，前者把文件名中的’\'替换为’/'，后者会把会话文件的换行符保存成unix格式
set sessionoptions +=unix,slash
" }@}


" System Config {@{
" =右边不可有空格，否则不能识别
" automatic full screen at startup
if IsWindows()
    autocmd GUIEnter * simalt ~x
    if has('gui_running') && has('libcall')
        let g:MyVimLib = $VIMRUNTIME.'/gvimfullscreen.dll'
        function! ToggleFullScreen()
            call libcallnr(g:MyVimLib, "ToggleFullScreen", 0)
        endfunction

        "全屏，Alt+Enter
        map <A-Enter> <Esc>:call ToggleFullScreen()<CR>

        let g:VimAlpha = 240
        function! SetAlpha(alpha)
            let g:VimAlpha = g:VimAlpha + a:alpha
            if g:VimAlpha < 180
                let g:VimAlpha = 180
            endif
            if g:VimAlpha > 255
                let g:VimAlpha = 255
            endif
            "call libcall(g:MyVimLib, 'SetAlpha', g:VimAlpha)
            call libcallnr("vimtweak.dll", "SetAlpha", g:VimAlpha)
        endfunction

        "透明，Shift+Y
        nmap <s-y> <Esc>:call SetAlpha(3)<CR>
        "透明，Shift+T
        nmap <s-t> <Esc>:call SetAlpha(-3)<CR>

        let g:VimTopMost = 0
        function! SwitchVimTopMostMode()
            if g:VimTopMost == 0
                let g:VimTopMost = 1
            else
                let g:VimTopMost = 0
            endif
            call libcall(g:MyVimLib, 'EnableTopMost', g:VimTopMost)
        endfunction

        "顶层，Shift+R
        nmap <s-r> <Esc>:call SwitchVimTopMostMode()<CR>
    endif
endif

" support utf-8
if has("multi_byte")
    set encoding=utf-8
    set termencoding=utf-8
    set formatoptions+=mM
    set fencs=utf-8,gbk
    if v:lang =~? '^/(zh/)/|/(ja/)/|/(ko/)'
        set ambiwidth=double
    endif
    if has("win32")
        source $VIMRUNTIME/delmenu.vim
        source $VIMRUNTIME/menu.vim
        language messages zh_CN.utf-8
    endif
else
    echoerr "sorry, this version of (g)vim was not compiled with +multi_byte"
endif

" 让配置变更立即生效
autocmd BufWritePost $MYVIMRC source $MYVIMRC

" 改变光标样式
set guicursor=i:ver1

" 不在当前目录生成备份文件
"set undodir = $VIM/undodir/
set noundofile
set nobackup
set noswapfile

" 显示不可见字符
"set list
"set listchars=eol:┐,trail:┐,tab:>-,nbsp:.,precedes:«,extends:»

" 打开文件的同时，自动切换当前路径
" autocmd BufEnter * silent! lcd %:p:h:gs/ /\\ /

" 开启omni completion
autocmd FileType c set omnifunc=ccomplete#Complete
autocmd FileType java set omnifunc=javacomplete#Complete
"autocmd FileType lua set omnifunc=luacomplete#Complete
autocmd FileType python set omnifunc=pythoncomplete#Complete
autocmd FileType javascript set omnifunc=javascriptcomplete#CompleteJS
autocmd FileType html set omnifunc=htmlcomplete#CompleteTags
autocmd FileType css set omnifunc=csscomplete#CompleteCSS
autocmd FileType xml set omnifunc=xmlcomplete#CompleteTags
autocmd FileType php set omnifunc=phpcomplete#CompletePHP
if has("autocmd") && exists("+omnifunc")
  autocmd Filetype *
        \ if &omnifunc == "" |
        \ setlocal omnifunc=syntaxcomplete#Complete |
        \ endif
endif
" }@}


" Keyboard Config {@{
" 通用快捷键，保证相同的功能用相同的快捷键 {@{
" 上下分屏，水平排列，并是/否跳转
let hsplit  ="hsp"   " short for 'h'
let shsplit ="shsp"  " short for 'sh'

" 左右分屏，垂直排列，并是/否跳转
let vsplit ="vsp"    " short for 'v'
let svsplit ="svsp"  " short for 'sv'

" 不分屏直接打开文件，并是/否跳转
let open  ="o"
let sopen ="so"

" 在新标签页中打开
let tab ="tb"

" 切换工作目录
let cwd ="cd"

" 打开菜单
let menu = "me"

" 新建书签
let NewBookMark = "nbm"

" 删除书签
let DeleteBookMark = "dbm"

" 退出
let quit = "qu"

" 全屏显示
let FullScreen = "fs"

" 帮助
let help = "he"

" 刷新
let refresh = "re"

" 打开文件搜索
let fsearch = "ff"
" 全局搜索
let gfsearch = "gff"
" 当前目录搜索
let dfsearch = "dff"

" 打开字符串搜索
let ssearch = "sf"
" 全局搜索
let gssearch = "gsf"
" 当前目录搜索
let dssearch = "dsf"
" 当前文件搜索
let fssearch = "fsf"
" }@}

" defined <leader>
let mapleader =";"

" Vim's Function {@{
" 文档操作 {@{
" 设置快捷键将选中文本块复制至系统剪贴板
vnoremap <leader>sy "+y

" 设置快捷键将系统剪贴板内容粘贴至 vim
nmap <leader>sp "+p

" 定义快捷键关闭当前分割窗口
nmap <leader>fq :q<CR>
nmap <leader>fqa :qa<CR>

" 不做任何保存，直接退出 vim
nmap <leader>fQ :q!<CR>
nmap <leader>fQA :qa!<CR>

" 定义快捷键保存当前窗口内容
nmap <leader>fw :w<CR>
nmap <leader>fwa :wa<CR>
nmap <leader>fwq :wq<CR>

" 定义快捷键保存所有窗口内容并退出 vim
nmap <leader>fwqa :wa<CR>:q<CR>

" 打开当前文件所在位置
nmap <leader>fo <ESC>:call OpenFileLocation()<CR>

" 定义快捷键在结对符之间跳转
nmap <leader>m %

" 定义快捷键到行首和行尾
nmap <leader>lb 0
nmap <leader>le $

" 用空格键来开关代码折叠
nnoremap <leader><space> @=((foldclosed(line('.')) < 0) ? 'zc' : 'zo')<CR>

" 打开/关闭所有折叠
nnoremap <leader><space>o zR
nnoremap <leader><space>c zM

" 跳转到下/上一个折叠
nnoremap <leader><space>j zj
nnoremap <leader><space>k zk
" }@}

" 窗口操作 {@{
" 跳转至右方的窗口
nnoremap <leader>lw <C-W>l

" 跳转至左方的窗口
nnoremap <leader>hw <C-W>h

" 跳转至上方的子窗口
nnoremap <leader>kw <C-W>k

" 跳转至下方的子窗口
nnoremap <leader>jw <C-W>j

" 依次遍历子窗口
nnoremap <leader>nw <C-W><C-W>

" 跳转到最左上角的窗口
nnoremap <leader>tw <C-W>t

" 跳转到最右下角的窗口
nnoremap <leader>bw <C-W>b

" 跳转到前一个访问的窗口
nnoremap <leader>pw <C-W>p

" 移动窗口至屏幕底端，并占用全部宽度
nmap <leader>wj <C-W>J

" 移动窗口至屏幕顶端，并占用全部宽度
nmap <leader>wk <C-W>K

" 移动窗口至屏幕左端，并占用全部高度
nmap <leader>wh <C-W>H

" 移动窗口至屏幕右端，并占用全部高=
nmap <leader>wl <C-W>L

" 调整窗口大小
nmap <leader>ws3 :resize +16<CR>
nmap <leader>ws4 :resize -16<CR>
nmap <leader>ws1 :vertical resize +16<CR>
nmap <leader>ws2 :vertical resize -16<CR>

" 微调窗口大小
nmap <leader>w1 <C-W>>
nmap <leader>w2 <C-W><
nmap <leader>w3 <C-W>+
nmap <leader>w4 <C-W>-

" 将当前窗口的宽度调到最大
nmap <leader>w[ <C-W>|

" 将当前窗口的宽度调到最小
nmap <leader>w] <C-W>1|

" 让所有窗口调整至相同尺寸
nmap <leader>w' <C-W>=

" 关闭当前窗口
nmap <leader>wq <C-W>c

" 关闭其它窗口
nmap <leader>wqo <C-W>o
" }@}

" 标签操作 {@{
" 新建标签
nmap <leader>tc :tabnew<CR>

" 关闭标签
nmap <leader>tq :tabc<CR>

" 在新标签中打开当前缓冲区中的文件
nmap <leader>to :tab split<CR>

" 跳转到下/上一个标签, 标准模式下gt gT可以直接在tab之间切换
nmap <leader>tn :tabn<CR>
nmap <leader>tp :tabp<CR>

" 跳转到第一个标签
nmap <leader>tf :tabfirst<CR>

" 跳转到最后一个标签
nmap <leader>tl :tablast<CR>

" 移动标签
"nmap <leader>tm :tabm 1

" 显示标签列表
nmap <leader>ts :tabs<CR>
" }@}

" terminal操作 {@{
" 打开terminal窗口
nnoremap <leader>tec :ter ++curwin<CR>
" 进入terminal窗口normal模式
if IsWindows()
tnoremap <ESC><ESC> <C-\><C-N>
else
tnoremap <ESC><ESC> <C-W>N
end
" 隐藏terminal窗口
tnoremap <ESC>h <C-W>:hide<CR>
" 关闭terminal窗口
tnoremap <ESC>q <C-W>:quit!<CR>
" }@}

" buffer操作 {@{
" 新建一个空buffer
nmap <leader>bc :enew<CR>
" 新建一个水平排列的空buffer
nmap <leader>bch :new<CR>
" 新建一个垂直排列的空buffer
nmap <leader>bcv :vnew<CR>
" 退出当前buffer
nmap <leader>bq :bd<CR>
" 下一个buffer
nnoremap <leader>bn :bn<CR>
" 前一个buffer
nnoremap <leader>bp :bp<CR>
" 之前所在的buffe
nnoremap <leader>bl :b#<CR>
" 关闭所有非当前buffer
command! BQuitOthers call <SID>BufQuitOthers()
function! BufQuitOthers()
   let l:currentBufNum   = bufnr("%")
   let l:alternateBufNum = bufnr("#")
   for i in range(1,bufnr("$"))
     if buflisted(i)
       if i!=l:currentBufNum
         execute("bdelete ".i)
       endif
     endif
   endfor
endfunction
map <leader>bqo :BQuitOthers<cr>
" }@}

" 切换当前目录为正在编辑的文件所在目录
nnoremap <silent><leader>cd :cd %:p:h<CR>
" }@}

" Plugins's Function {@{
" NERDTree {@{
" https://github.com/scrooloose/nerdtree/blob/master/doc/NERDTree.txt
" 打开/关闭NERDTree
nmap <leader>nt :NERDTreeToggle<CR>

" 将NERDTree定位到当前文件的目录
nmap <leader>nf :NERDTreeFind<CR>

" 将当前所在node加入书签
nmap <leader>nbm :Bookmark<CR>

let g:NERDTreeMapActivateNode  =open
let g:NERDTreeMapPreview       =sopen
let g:NERDTreeMapOpenSplit     =hsplit
let g:NERDTreeMapPreviewSplit  =shsplit
let g:NERDTreeMapOpenVSplit    =vsplit
let g:NERDTreeMapPreviewVSplit =svsplit
let g:NERDTreeMapOpenInTab     =tab
let g:NERDTreeMapChdir         =cwd
let g:NERDTreeMapMenu          =menu
let g:NERDTreeMapQuit          =quit
let g:NERDTreeMapToggleZoom    =FullScreen
let g:NERDTreeMapHelp          =help
let g:NERDTreeMapRefreshRoot   =refresh
" }@}

" VimFswitch {@{
" *.cpp 和 *.h 间切换
nmap <silent><leader>sw :FSHere<cr>
" }@}

" YouCompleteMe {@{
" 转到定义
nnoremap <A-g> :YcmCompleter GoToDefinitionElseDeclaration<CR>
" }@}

" Slimv {@{
nmap <leader>s ,
nmap <leader>sme ,,
" }@}

" Ack {@{
" https://github.com/mileszs/ack.vim/blob/master/doc/ack.txt
" https://blog.csdn.net/Demorngel/article/details/71147697
"map <leader>ssearch :Ack<space>
"map <leader>sf :Ack!<space>
" }@}

" CtrlSF {@{
" https://github.com/dyng/ctrlsf.vim/blob/master/doc/ctrlsf.txt
" https://www.cnblogs.com/yuehq/p/4067817.html
nmap <leader>sf :CtrlSF<space>
nmap <leader>sft :CtrlSFToggle<cr>
vmap <leader>sfv <Plug>CtrlSFVwordExec
nmap <leader>sfc <Plug>CtrlSFCwordPath
nmap <leader>sfl <Plug>CtrlSFPwordPath
" }@}

" Ale {@{
" https://github.com/w0rp/ale/blob/master/doc/ale.txt
" https://blog.csdn.net/Demorngel/article/details/69052789
" 普通模式下，sp前往上一个错误或警告，sn前往下一个错误或警告
nmap sp <Plug>(ale_previous_wrap)
nmap sn <Plug>(ale_next_wrap)
" <leader>s触发/关闭语法检查
nmap <leader>s :ALEToggle<CR>
" <leader>d查看错误或警告的详细信息
nmap <leader>d :ALEDetail<CR>
" }@}
" }@}
" }@}


" Text Editor Config {@{
set nu!

" 开启语法高亮功能
syntax enable

" 允许用指定语法高亮配色方案替换默认方案
syntax on

"set guifont=Consolas:h16
"set guifont =Monaco:h16

" 开启实时搜索功能
set incsearch

" 搜索时大小写不敏感
set ignorecase
" 如果有一个大写字母，则切换到大小写敏感查找
set smartcase

" 关闭兼容模式
set nocompatible

" vim 自身命令行模式智能补全
set wildmenu

" 总是显示状态栏
set laststatus =2

" 显示光标当前位置
set ruler

" 开启行号显示
set number

" 高亮显示当前行/列
set cursorline
"set cursorcolumn

" 高亮显示搜索结果
set hlsearch

" 开启文件类型侦测
filetype on

" 根据侦测到的不同类型加载对应的插件
filetype plugin on

" 自适应不同语言的智能缩进
filetype indent on

" 将制表符扩展为空格
set expandtab

" 设置编辑时制表符占用空格数
set tabstop =4

" 设置格式化时制表符占用空格数
set shiftwidth =4

" 让 vim 把连续数量的空格视为一个制表符
set softtabstop =4

" 代码折叠
set foldenable
"set foldmethod =indent
"set foldmethod =syntax
set foldmethod =marker
set foldmarker ={@{,}@}

" 设置不自动折行
set nowrap

" 设置索引文件位置
set tags=./.tags;,.tags
" }@}


" Editor Theme Config {@{
"colorscheme molokai
"colorscheme phd

" Solarized {@{
colorscheme solarized
set background =dark
let g:solarized_termcolors =256
" }@}

" 禁止光标闪烁
"set gcr =a:block-blinkon0

" 禁止显示滚动条
set guioptions -=l
set guioptions -=L
set guioptions -=r
set guioptions -=R

" 禁止显示菜单和工具条
set guioptions -=m
set guioptions -=T
" }@}


" Editor Plugin Config {@{
" Specify a directory for plugins
" - For Neovim: ~/.local/share/nvim/plugged
" - Avoid using standard Vim directory names like 'plugin'
if IsWindows()
    "Windows (PowerShell)
    "$uri = 'https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim'
    "(New-Object Net.WebClient).DownloadFile(
    "$uri,
    "$ExecutionContext.SessionState.Path.GetUnresolvedProviderPathFromPSPath(
    ""$VIMRUNTIME\autoload\plug.vim"
    ")
    ")
    call plug#begin('$VIM/vimfiles/plugged/')
else
    if empty(glob('~/.vim/autoload/plug.vim'))
        silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
                    \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
        autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
    endif
    call plug#begin('~/.vim/plugged')
endif

" Plugins {@{
" Make sure you use single quotes
Plug 'altercation/vim-colors-solarized'
Plug 'tomasr/molokai'
Plug 'vim-scripts/phd'
Plug 'lilydjwg/fcitx.vim'
Plug 'derekwyatt/vim-protodef'
" lisp support
Plug 'kovisoft/slimv'
" lua support
Plug 'xolox/vim-misc'          " required by lua.vim
Plug 'xolox/vim-lua-ftplugin'  " lua file type plug-in for the vim text editor
" golang support, reference: https://blog.csdn.net/zhang197093/article/details/78559903?locationNum=5&fps=1
Plug 'fatih/vim-go'
Plug 'nsf/gocode', {'rtp': 'vim/'}
" version control
Plug 'tpope/vim-fugitive'
Plug 'junegunn/gv.vim'
Plug 'mhinz/vim-signify'
Plug 'whiteinge/diffconflicts'
Plug 'airblade/vim-gitgutter'
" eiditor
Plug 'luochen1990/rainbow'
Plug 'haya14busa/incsearch.vim'
Plug 'easymotion/vim-easymotion'
Plug 'andymass/vim-matchup'
Plug 'qstrahl/vim-matchmaker'
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
Plug 'enricobacis/vim-airline-clock'
Plug 'mattn/webapi-vim'
Plug 'thaerkh/vim-workspace'
Plug 'farmergreg/vim-lastplace'
Plug 'mbbill/undotree'
Plug 'xolox/vim-session'
"Plug 'Wildog/airline-weather.vim'
Plug 'ryanoasis/vim-devicons'
Plug 'scrooloose/nerdtree'
Plug 'Xuyuanp/nerdtree-git-plugin'
Plug 'tiagofumo/vim-nerdtree-syntax-highlight'
Plug 'terryma/vim-multiple-cursors'
Plug 'MattesGroeger/vim-bookmarks'
"Plugin 'lyokha/vim-xkbswitch'
Plug 'majutsushi/tagbar'
Plug 'derekwyatt/vim-fswitch'
Plug 'Shougo/context_filetype.vim'  " 文件类型检测
Plug 'kana/vim-textobj-user'
Plug 'thinca/vim-quickrun'
Plug 'osyo-manga/vim-precious'
" text
Plug 'lfv89/vim-interestingwords'
Plug 'itchyny/vim-cursorword'
" codes
Plug 'w0rp/ale'
Plug 'ycm-core/YouCompleteMe'
Plug 'Chiel92/vim-autoformat'  " 格式化
Plug 'junegunn/vim-easy-align'
Plug 'justinmk/vim-syntax-extra'  " 语法高亮
Plug 'octol/vim-cpp-enhanced-highlight'
Plug 'Shougo/echodoc.vim'
Plug 'tpope/vim-surround'
Plug 'scrooloose/nerdcommenter'  " 注释
Plug 'vim-scripts/DoxygenToolkit.vim'
Plug 'Yggdroot/indentLine'
" string search
Plug 'mileszs/ack.vim'
Plug 'dyng/ctrlsf.vim'
" tags search
Plug 'ludovicchabant/vim-gutentags'
if IsWindows()
    Plug 'Yggdroot/LeaderF', { 'do': '.\install.bat' }
else
    Plug 'Yggdroot/LeaderF', { 'do': './install.sh' }
end
Plug 'brookhong/cscope.vim'
" others
Plug 'skywind3000/asyncrun.vim'
" }@}
" Initialize plugin system
call plug#end()

" NERDTree {@{
" reference: https://segmentfault.com/a/1190000015143474
" 在 vim 启动的时候默认开启 NERDTree（autocmd 可以缩写为 au）
autocmd VimEnter * NERDTree
" 将 NERDTree 的窗口设置在 vim 窗口的右侧（默认为左侧）
let NERDTreeWinPos ="right"
" 当打开 NERDTree 窗口时，自动显示 Bookmarks
let NERDTreeShowBookmarks =1
" 显示行号
let NERDTreeShowLineNumbers =1
let NERDTreeAutoCenter =1
" 是否显示隐藏文件
let NERDTreeShowHidden =1
" NERDTree 子窗口中不显示冗余帮助信息
let NERDTreeMinimalUI =1
" 删除文件时自动删除文件对应 buffer
let NERDTreeAutoDeleteBuffer =1
" vim不指定具体文件打开是，自动使用nerdtree
autocmd StdinReadPre * let s:std_in =1
autocmd VimEnter * if argc() == 0 && !exists("s:std_in") | NERDTree | endif
" 当vim打开一个目录时，nerdtree自动使用
autocmd StdinReadPre * let s:std_in =1
autocmd VimEnter * if argc() == 1 && isdirectory(argv()[0]) && !exists("s:std_in") | exe 'NERDTree' argv()[0] | wincmd p | ene | endif
" 当vim中没有其他文件，只剩下nerdtree的时候，自动关闭窗口
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif
" }@}

" NerdtreeGitPlugin {@{
let g:NERDTreeIndicatorMapCustom ={
            \ "Modified"  : "*",
            \ "Staged"    : "+",
            \ "Untracked" : "☆",
            \ "Renamed"   : "→",
            \ "Unmerged"  : "=",
            \ "Deleted"   : "X",
            \ "Dirty"     : "x",
            \ "Clean"     : "√",
            \ "Ignored"   : "◎",
            \ "Unknown"   : "?"
            \ }
" }@}

" YouCompleteMe {@{
" references: https://www.jianshu.com/p/4fea42514eaa
"             https://www.zhihu.com/question/25437050/answer/95662340
"             https://zhuanlan.zhihu.com/p/33046090
let g:ycm_server_keep_logfiles = 1
let g:ycm_server_log_level = 'info'

" YCM 补全菜单配色，https://jonasjacek.github.io/colors/
" 菜单
highlight Pmenu ctermfg=2 ctermbg=3 guifg=#005f87 guibg=#EEE8D5
" 选中项
highlight PmenuSel ctermfg=2 ctermbg=3 guifg=#afd700 guibg=#106900
" YCM 集成 OmniCppComplete 补全引擎，设置其快捷键
inoremap <leader>; <C-x><C-o>

" 触发语义补全
let g:ycm_key_invoke_completion = '<c-z>'
noremap <c-z> <NOP>
" 自动补全配置
" 函数原型预览窗口
set completeopt=menu,menuone
let g:ycm_add_preview_to_completeopt = 0
" 屏蔽 YCM 的诊断信息
let g:ycm_show_diagnostics_ui = 0

autocmd InsertLeave * if pumvisible() == 0|pclose|endif "离开插入模式后自动关闭预览窗口 
inoremap <expr> <CR> pumvisible() ? "\<C-y>" : "\<CR>"    "回车即选中当前项  

" 追加语义触发的条件
let g:ycm_semantic_triggers =  {
			\ 'c,cpp,python,java,go,erlang,perl': ['re!\w{2}'],
			\ 'cs,lua,javascript': ['re!\w{2}'],
			\ }

" 上下选择
let g:ycm_key_list_select_completion   = ['<c-n>']
let g:ycm_key_list_select_completion   = ['<Down>']
let g:ycm_key_list_previous_completion = ['<c-p>']
let g:ycm_key_list_previous_completion = ['<Up>']
"关闭加载.ycm_extra_conf.py提示
let g:ycm_confirm_extra_conf=0

let g:ycm_min_num_identifier_candidate_chars = 2
"在注释输入中也能补全  
let g:ycm_complete_in_comments = 1  
"在字符串输入中也能补全  
let g:ycm_complete_in_strings = 1  
"注释和字符串中的文字也会被收入补全  
let g:ycm_collect_identifiers_from_comments_and_strings = 1
let g:clang_user_options='|| exit 0'  
"" 开启 YCM 标签补全引擎
let g:ycm_collect_identifiers_from_tags_files=1
" 语法关键字补全
let g:ycm_seed_identifiers_with_syntax=1
" 禁止缓存匹配项，每次都重新生成匹配项
let g:ycm_cache_omnifunc=0
" 从第一个键入字符就开始罗列匹配项
let g:ycm_min_num_of_chars_for_completion=1

if IsWindows()
  " 需要配置环境变量
  let g:ycm_server_python_interpreter = $PYTHON.'/python.exe'
  let g:ycm_global_ycm_extra_conf='$VIM/vimfiles/plugged/YouCompleteMe/.ycm_extra_conf.py'
else
  let g:ycm_server_python_interpreter='/usr/bin/python'
  let g:ycm_global_ycm_extra_conf='~/.vim/plugged/YouCompleteMe/.ycm_extra_conf.py'
endif 
" }@}

" Slimv {@{
if IsWindows()
  let g:slimv_swank_cmd ='!start "D:/Develop/ccl19/wx86cl.exe" -l ' . '$VIM/vimfiles/plugged/slimv/slime/start-swank.lisp'
  "let g:slimv_swank_cmd ='!start "D:/Develop/Steel Bank Common Lisp/1.3.1/sbcl.exe" --load ' . '$VIM/vimfiles/plugged/slimv/slime/start-swank.lisp'
else
  let g:slimv_swank_cmd ='! xterm -e sbcl --load /usr/share/common-lisp/source/slime/start-swank.lisp &'
endif

" enabled rainbow parenthesis
let g:lisp_rainbow =1

let g:slimv_leader =','

let g:paredit_mode =0

let g:paredit_electric_return =1
" }@}

" Ack {@{
" references: https://blog.csdn.net/Demorngel/article/details/71147697
" 调用rg进行搜索, https://segmentfault.com/a/1190000016170184
if executable('rg')
    let g:ackprg = 'rg --vimgrep'
endif
" 调用ag进行搜索
"if executable('ag')
"    let g:ackprg = 'ag --vimgrep'
"endif
let g:ackhighlight = 1
" }@}

" CtrlSF {@{
let g:ctrlsf_search_mode = 'async'
let g:ctrlsf_winsize = "20%"
" }@}

" Ale {@{
" references: https://blog.csdn.net/Demorngel/article/details/69052789
let g:ale_linters_explicit = 1
let g:ale_completion_delay = 500
let g:ale_echo_delay = 20
let g:ale_lint_delay = 500
let g:ale_echo_msg_format = '[%linter%] %code: %%s'
let g:ale_lint_on_text_changed = 'normal'
let g:ale_lint_on_insert_leave = 1
let g:airline#extensions#ale#enabled = 1

let g:ale_c_gcc_options = '-Wall -O2 -std=c99'
let g:ale_cpp_gcc_options = '-Wall -O2 -std=c++14'
let g:ale_c_cppcheck_options = ''
let g:ale_cpp_cppcheck_options = ''
let g:ale_sign_error = "\ue009\ue009"
hi! clear SpellBad
hi! clear SpellCap
hi! clear SpellRare
hi! SpellBad gui=undercurl guisp=red
hi! SpellCap gui=undercurl guisp=blue
hi! SpellRare gui=undercurl guisp=magenta
" 格式化代码，需要自行配置
autocmd FileType python noremap <buffer> <leader>cpf :ALEFix<CR>
let g:ale_fixers = {
\ 'python': ['add_blank_lines_for_python_control_statements','autopep8','isort','yapf','remove_trailing_lines','trim_whitespace'],
\}
" }@}

" rainbow {@{
let g:rainbow_active = 1 "0 if you want to enable it later via :RainbowToggle
let g:rainbow_conf = {
            \ 'guifgs': ['royalblue3', 'darkorange3', 'seagreen3', 'firebrick'],
            \ 'ctermfgs': ['lightblue', 'lightyellow', 'lightcyan', 'lightmagenta'],
            \ 'operators': '_,_',
            \ 'parentheses': ['start=/(/ end=/)/ fold', 'start=/\[/ end=/\]/ fold', 'start=/{/ end=/}/ fold'],
            \ 'separately': {
            \   '*': {},
            \   'tex': {
            \     'parentheses': ['start=/(/ end=/)/', 'start=/\[/ end=/\]/'],
            \   },
            \   'lisp': {
            \     'guifgs': ['royalblue3', 'darkorange3', 'seagreen3', 'firebrick', 'darkorchid3'],
            \   },
            \   'vim': {
            \     'parentheses': ['start=/(/ end=/)/', 'start=/\[/ end=/\]/', 'start=/{/ end=/}/ fold', 'start=/(/ end=/)/ containedin=vimFuncBody', 'start=/\[/ end=/\]/ containedin=vimFuncBody', 'start=/{/ end=/}/ fold containedin=vimFuncBody'],
            \   },
            \   'html': {
            \     'parentheses': ['start=/\v\<((area|base|br|col|embed|hr|img|input|keygen|link|menuitem|meta|param|source|track|wbr)[ >])@!\z([-_:a-zA-Z0-9]+)(\s+[-_:a-zA-Z0-9]+(\=("[^"]*"|'."'".'[^'."'".']*'."'".'|[^ '."'".'"><=`]*))?)*\>/ end=#</\z1># fold'],
            \   },
            \   'css': 0,
            \ }
            \}
" devicons may be conflit with rainbow plugin
let g:rainbow_conf = {
            \    'separately': {
            \       'nerdtree': 0
            \    }
            \}
" }@}

" incsearch {@{
" :h g:incsearch#auto_nohlsearch
set hlsearch
let g:incsearch#auto_nohlsearch = 1
map n  <Plug>(incsearch-nohl-n)
map N  <Plug>(incsearch-nohl-N)
map *  <Plug>(incsearch-nohl-*)
map #  <Plug>(incsearch-nohl-#)
map g* <Plug>(incsearch-nohl-g*)
map g# <Plug>(incsearch-nohl-g#)
" }@}

" easymotion {@{
" <Leader>f{char} to move to {char}
map  <Leader>f <Plug>(easymotion-bd-f)
nmap <Leader>f <Plug>(easymotion-overwin-f)

" s{char}{char} to move to {char}{char}
nmap s <Plug>(easymotion-overwin-f2)

" Move to line
map <Leader>L <Plug>(easymotion-bd-jk)
nmap <Leader>L <Plug>(easymotion-overwin-line)

" Move to word
map  <Leader>w <Plug>(easymotion-bd-w)
nmap <Leader>w <Plug>(easymotion-overwin-w)
" }@}

" matchup {@{
let g:loaded_matchit = 1
" }@}

" matchmaker {@{
let g:matchmaker_enable_startup = 1
let g:matchmaker_ignore_single_match = 1
let g:matchmaker_matchpriority = 0
" }@}

" gutentags {@{
" gutentags 搜索工程目录的标志，碰到这些文件/目录名就停止向上一级目录递归
let g:gutentags_project_root = ['.root', '.svn', '.git', '.hg', '.project']

" 所生成的数据文件的名称
let g:gutentags_ctags_tagfile = '.tags'

" 将自动生成的 tags 文件全部放入 ~/.cache/tags 目录中，避免污染工程目录
let s:vim_tags = expand('~/.cache/tags')
let g:gutentags_cache_dir = s:vim_tags

" 配置 ctags 的参数
let g:gutentags_ctags_extra_args = ['--fields=+niazS', '--extra=+q']
let g:gutentags_ctags_extra_args += ['--c++-kinds=+px']
let g:gutentags_ctags_extra_args += ['--c-kinds=+px']

" 检测 ~/.cache/tags 不存在就新建
if !isdirectory(s:vim_tags)
    silent! call mkdir(s:vim_tags, 'p')
endif
" }@}

" leaderf {@{
let g:Lf_ShortcutF = '<leader>ff'
let g:Lf_ShortcutB = '<leader>fb'
noremap <leader>ff :LeaderfFile<cr>
noremap <leader>ffm :LeaderfMru<cr>
noremap <leader>ffu :LeaderfFunction<cr>
noremap <leader>fb :LeaderfBuffer<cr>
noremap <leader>ft :LeaderfBufTag<cr>
let g:Lf_StlSeparator = { 'left': '', 'right': '', 'font': '' }

let g:Lf_RootMarkers = ['.project', '.root', '.svn', '.git']
let g:Lf_WorkingDirectoryMode = 'Ac'
let g:Lf_WindowHeight = 0.30
let g:Lf_CacheDirectory = expand('~/.vim/cache')
let g:Lf_ShowRelativePath = 0
let g:Lf_HideHelp = 1
let g:Lf_StlColorscheme = 'powerline'
let g:Lf_PreviewResult = {'Function':0, 'BufTag':0}
" }@}

" airline {@{
" reference: https://www.jianshu.com/p/310368097c75
"            https://mounui.com/331.html
" 这个是安装字体后 必须设置此项"
let g:airline_powerline_fonts = 1
if !exists('g:airline_symbols')
    let g:airline_symbols={}
endif
" 打开tabline功能
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#buffer_nr_show = 1
let g:airline#extensions#tabline#left_sep = ' '
let g:airline#extensions#tabline#left_alt_sep = '|'
let g:airline#extensions#tabline#formatter = 'default'
" 关闭状态显示空白符号计数
let g:airline#extensions#whitespace#enabled = 0
let g:airline#extensions#whitespace#symbol = '!'
set lazyredraw

" Vim 在与屏幕/键盘交互时使用的编码(取决于实际的终端的设定)
set langmenu=zh_CN.UTF-8
" 设置打开文件的编码格式
set fileencodings=ucs-bom,utf-8,cp936,gb18030,big5,euc-jp,euc-kr,latin1
set fileencoding=utf-8
" 设置中文帮助
set helplang=cn
" 设置字体
"set guifont=Powerline_Consolas:h16
" }@}

" airline-themes {@{
let g:airline_theme='solarized'
let g:airline_solarized_bg='dark'
" }@}

" autoformat {@{
" references: https://blog.csdn.net/demorngel/article/details/69053613
" TODO: should be async
"au BufWrite * :Autoformat
noremap <leader>cf :Autoformat<CR>
" }@}

" echodoc {@{
" you could disable showmode alltogether.
set noshowmode
let g:echodoc_enable_at_startup = 1
" }@}

" nerdtree-syntax-highlight {@{
" highlight full name (not only icons)
let g:NERDTreeFileExtensionHighlightFullName = 1
let g:NERDTreeExactMatchHighlightFullName = 1
let g:NERDTreePatternMatchHighlightFullName = 1
" highlight folders using exact match
let g:NERDTreeHighlightFolders = 1 " enables folder icon highlighting using exact match
let g:NERDTreeHighlightFoldersFullName = 1 " highlights the folder name
" }@}

" devicons {@{
"set guifont=Monoid_Nerd_Font:h16
set guifont=DroidSansMono_Nerd_Font:h16
" }@}

" airline-weather {@{
let g:weather#area = 'chengducity,ch'
let g:weather#unit = 'metric'
" }@}

" easy-align {@{
vmap <leader>ca <Plug>(EasyAlign)
nmap <leader>ca <Plug>(EasyAlign)
if !exists('g:easy_align_delimiters')
  let g:easy_align_delimiters = {}
endif
let g:easy_align_delimiters['#'] = { 'pattern': '#', 'ignore_groups': ['String'] }
" }@}
" }@}
