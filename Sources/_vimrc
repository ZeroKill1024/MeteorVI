source $VIMRUNTIME/vimrc_example.vim
source $VIMRUNTIME/mswin.vim
behave mswin

set diffexpr=MyDiff()
function MyDiff()
  let opt = '-a --binary '
  if &diffopt =~ 'icase' | let opt = opt . '-i ' | endif
  if &diffopt =~ 'iwhite' | let opt = opt . '-b ' | endif
  let arg1 = v:fname_in
  if arg1 =~ ' ' | let arg1 = '"' . arg1 . '"' | endif
  let arg2 = v:fname_new
  if arg2 =~ ' ' | let arg2 = '"' . arg2 . '"' | endif
  let arg3 = v:fname_out
  if arg3 =~ ' ' | let arg3 = '"' . arg3 . '"' | endif
  if $VIMRUNTIME =~ ' '
    if &sh =~ '\<cmd'
      if empty(&shellxquote)
        let l:shxq_sav = ''
        set shellxquote&
      endif
      let cmd = '"' . $VIMRUNTIME . '\diff"'
    else
      let cmd = substitute($VIMRUNTIME, ' ', '" ', '') . '\diff"'
    endif
  else
    let cmd = $VIMRUNTIME . '\diff'
  endif
  silent execute '!' . cmd . ' ' . opt . arg1 . ' ' . arg2 . ' > ' . arg3
  if exists('l:shxq_sav')
    let &shellxquote=l:shxq_sav
  endif
endfunction

"""""""""""""""""""" user's configuration """"""""""""""""""""
" general {
function IsLinux()
	return (has('unix') && !has('macunix') && !has('win32unix'))
endfunction
function IsWindows()
	return (has('win32') || has('win64'))
endfunction
function IsOSX()
	return has('macunix')
endfunction
" }
" system config {
" automatic full screen at startup
autocmd GUIEnter * simalt ~x
" support utf-8
if has("multi_byte")
    set encoding=utf-8 
    set termencoding=utf-8 
    set formatoptions+=mM 
    set fencs=utf-8,gbk 
    if v:lang =~? '^/(zh/)/|/(ja/)/|/(ko/)' 
        set ambiwidth=double 
    endif 
    if has("win32") 
        source $VIMRUNTIME/delmenu.vim 
        source $VIMRUNTIME/menu.vim 
        language messages zh_CN.utf-8 
    endif 
else 
    echoerr "sorry, this version of (g)vim was not compiled with +multi_byte" 
endif
" 开启文件类型侦测
filetype on
" 根据侦测到的不同类型加载对应的插件
filetype plugin on
" 让配置变更立即生效
autocmd BufWritePost $MYVIMRC source $MYVIMRC
" 改变光标样式
set guicursor=i:ver1
if IsWindows()
" 窗口自动透明
au GUIEnter * call libcallnr("vimtweak.dll", "SetAlpha", 238)
endif
" 不在当前目录生成备份文件
"set undodir = $VIM/undodir/
set noundofile
set nobackup
set noswapfile
" }

" keyboard config {
" defined <Leader>
let mapleader = ";"
" 通用快捷键，相同的功能用相同的快捷键 {
" 上下分屏，水平排列
let hsplit = "hsp"
" 左右分屏，垂直排列
let vsplit = "vsp"
" }
" 定义快捷键到行首和行尾
nmap LB 0
nmap LE $
" 设置快捷键将选中文本块复制至系统剪贴板
vnoremap <Leader>y "+y
" 设置快捷键将系统剪贴板内容粘贴至 vim
nmap <Leader>p "+p
" 定义快捷键关闭当前分割窗口
nmap <Leader>q :q<CR>
" 定义快捷键保存当前窗口内容
nmap <Leader>w :w<CR>
" 定义快捷键保存所有窗口内容并退出 vim
nmap <Leader>WQ :wa<CR>:q<CR>
" 不做任何保存，直接退出 vim
nmap <Leader>Q :qa!<CR>
" 依次遍历子窗口
nnoremap nw <C-W><C-W>
" 跳转至右方的窗口
nnoremap <Leader>lw <C-W>l
" 跳转至左方的窗口
nnoremap <Leader>hw <C-W>h
" 跳转至上方的子窗口
nnoremap <Leader>kw <C-W>k
" 跳转至下方的子窗口
nnoremap <Leader>jw <C-W>j
" 定义快捷键在结对符之间跳转
nmap <Leader>M %
" 显示非可见字符
set list
set listchars=eol:┐,trail:┐,tab:>-,nbsp:.,precedes:«,extends:»
" }

" text editor config {
set nu!
" 开启语法高亮功能
syntax enable 
" 允许用指定语法高亮配色方案替换默认方案
syntax on
"set guifont=Consolas:h10
set guifont=Monaco:h10
" 开启实时搜索功能
set incsearch
" 搜索时大小写不敏感
set ignorecase
" 关闭兼容模式
set nocompatible
" vim 自身命令行模式智能补全
set wildmenu
" 总是显示状态栏
set laststatus=2
" 显示光标当前位置
set ruler
" 开启行号显示
set number
" 高亮显示当前行/列
set cursorline
"set cursorcolumn
" 高亮显示搜索结果
set hlsearch
" 自适应不同语言的智能缩进
filetype indent on
" 将制表符扩展为空格
set expandtab
" 设置编辑时制表符占用空格数
set tabstop=4
" 设置格式化时制表符占用空格数
set shiftwidth=4
" 让 vim 把连续数量的空格视为一个制表符
set softtabstop=4
" 基于缩进或语法进行代码折叠
"set foldmethod=indent
set foldmethod=syntax
" 启动 vim 时关闭折叠代码
set nofoldenable
" }

" theme config {
" solarized {
let g:solarized_termcolors=256
set background=dark
colorscheme solarized
"colorscheme molokai
"colorscheme phd
" }
" 禁止光标闪烁
set gcr=a:block-blinkon0
" 禁止显示滚动条
set guioptions-=l
set guioptions-=L
set guioptions-=r
set guioptions-=R
" 禁止显示菜单和工具条
set guioptions-=m
set guioptions-=T
" }

" vundle {
if IsWindows()
set rtp+=$VIM/vimfiles/bundle/Vundle.vim 
call vundle#rc('$VIM/vimfiles/bundle/')
else
set rtp+=~/.vim/bundle/Vundle.vim 
call vundle#rc()
endif
" plugs {
Plugin 'VundleVim/Vundle.vim.git'
Plugin 'altercation/vim-colors-solarized.git'
Plugin 'tomasr/molokai.git'
Plugin 'vim-scripts/phd'
Plugin 'scrooloose/nerdtree.git'
Plugin 'Xuyuanp/nerdtree-git-plugin.git'
Plugin 'kien/ctrlp.vim.git'
Plugin 'tacahiroy/ctrlp-funky.git'
Plugin 'lilydjwg/fcitx.vim.git'
Plugin 'majutsushi/tagbar.git'
Plugin 'vim-airline/vim-airline.git'
Plugin 'nathanaelkane/vim-indent-guides.git'
Plugin 'octol/vim-cpp-enhanced-highlight.git'
Plugin 'derekwyatt/vim-fswitch.git'
Plugin 'derekwyatt/vim-protodef.git'
Plugin 'scrooloose/nerdcommenter.git'
Plugin 'Valloric/YouCompleteMe.git'
if has("win32")
    "Plugin 'snakeleon/YouCompleteMe-x86'
elseif has("win64")
    Plugin 'snakeleon/YouCompleteMe-x64'
else
endif
" }
" }

" YouCompleteMe {
if has("win32")
    "let g:ycm_global_ycm_extra_conf = $VIM.'/vimfiles/bundle/YouCompleteMe-x86/python/.ycm_extra_conf.py'
elseif has("win64")
    let g:ycm_global_ycm_extra_conf = $VIM.'/vimfiles/bundle/YouCompleteMe-x64/python/.ycm_extra_conf.py'
else
    let g:ycm_global_ycm_extra_conf = $HOME.'/.vim/bundle/YouCompleteMe/python/.ycm_extra_conf.py'
endif
"" YCM 补全菜单配色
"" 菜单
"highlight Pmenu ctermfg=2 ctermbg=3 guifg=#005f87 guibg=#EEE8D5
"" 选中项
"highlight PmenuSel ctermfg=2 ctermbg=3 guifg=#AFD700 guibg=#106900
"" 补全功能在注释中同样有效
"let g:ycm_complete_in_comments=1
"" 允许 vim 加载 .ycm_extra_conf.py 文件，不再提示
"let g:ycm_confirm_extra_conf=0
"" 开启 YCM 标签补全引擎
"let g:ycm_collect_identifiers_from_tags_files=1
"" 引入 C++ 标准库tags
"set tags+=/data/misc/software/misc./vim/stdcpp.tags
"" YCM 集成 OmniCppComplete 补全引擎，设置其快捷键
"inoremap <leader>; <C-x><C-o>
"" 补全内容不以分割子窗口形式出现，只显示补全列表
"set completeopt-=preview
"" 从第一个键入字符就开始罗列匹配项
"let g:ycm_min_num_of_chars_for_completion=1
"" 禁止缓存匹配项，每次都重新生成匹配项
"let g:ycm_cache_omnifunc=0
"" 语法关键字补全			
"let g:ycm_seed_identifiers_with_syntax=1
"" 开启 YCM 标签引擎
"let g:ycm_collect_identifiers_from_tags_files=1
"" 引入 C++ 标准库tags
"set tags+=/data/misc/software/misc./vim/stdcpp.tags
set rtp+=$VIM/vimfiles/bundle/YouCompleteMe 
let g:ycm_global_ycm_extra_conf = $VIM.'/vimfiles/bundle/YouCompleteMe/third_party/ycmd/cpp/ycm/.ycm_extra_conf.py'
"let g:ycm_path_to_python_interpreter = $PYTHON_HOME."/python.exe"
let g:ycm_path_to_python_interpreter = "D:/Develop/Python27/python.exe"
" 转到定义
nnoremap <leader>jd :YcmCompleter GoToDefinitionElseDeclaration<CR> 
" }

" vim-fswitch {
" *.cpp 和 *.h 间切换
nmap <silent> <Leader>sw :FSHere<cr>
" }

" vim-indent-guides {
" 随 vim 自启动
let g:indent_guides_enable_on_vim_startup=1
" 从第二层开始可视化显示缩进
let g:indent_guides_start_level=2
" 色块宽度
let g:indent_guides_guide_size=1
" 快捷键 i 开/关缩进可视化
nmap <silent> <Leader>ig <Plug>IndentGuidesToggle
" }

" tagbar {
nmap <Leader>tb :TagbarToggle<CR>
" {

" nerdtree-git-plugin {
let g:NERDTreeIndicatorMapCustom = {
    \ "Modified"  : "*",
    \ "Staged"    : "+",
    \ "Untracked" : "☆",
    \ "Renamed"   : "→",
    \ "Unmerged"  : "=",
    \ "Deleted"   : "X",
    \ "Dirty"     : "x",
    \ "Clean"     : "√",
    \ "Ignored"   : "◎",
    \ "Unknown"   : "?"
    \ }
" }

" NERDTree {
" 在 vim 启动的时候默认开启 NERDTree（autocmd 可以缩写为 au）
autocmd VimEnter * NERDTree
nmap <Leader>n :NERDTreeToggle<CR>
let g:NERDTreeMapOpenSplit = hsplit 
let g:NERDTreeMapOpenVSplit = vsplit
" 将 NERDTree 的窗口设置在 vim 窗口的右侧（默认为左侧）
let NERDTreeWinPos="right"
" 当打开 NERDTree 窗口时，自动显示 Bookmarks
let NERDTreeShowBookmarks=1
" 显示行号
let NERDTreeShowLineNumbers=1
let NERDTreeAutoCenter=1
" 是否显示隐藏文件
let NERDTreeShowHidden=1
" NERDTree 子窗口中不显示冗余帮助信息
let NERDTreeMinimalUI=1
" 删除文件时自动删除文件对应 buffer
let NERDTreeAutoDeleteBuffer=1
" vim不指定具体文件打开是，自动使用nerdtree
autocmd StdinReadPre * let s:std_in=1
autocmd VimEnter * if argc() == 0 && !exists("s:std_in") | NERDTree | endif
" 当vim打开一个目录时，nerdtree自动使用
autocmd StdinReadPre * let s:std_in=1
autocmd VimEnter * if argc() == 1 && isdirectory(argv()[0]) && !exists("s:std_in") | exe 'NERDTree' argv()[0] | wincmd p | ene | endif
" 当vim中没有其他文件，值剩下nerdtree的时候，自动关闭窗口
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif
" }

" ctrlp {
let g:ctrlp_map = '<leader>p'
let g:ctrlp_cmd = 'CtrlP'
map <leader>f :CtrlPMRU<CR>
let g:ctrlp_custom_ignore = {
    \ 'dir':  '\v[\/]\.(git|hg|svn|rvm)$',
    \ 'file': '\v\.(exe|so|dll|zip|tar|tar.gz|pyc)$',
    \ }
" }

" ctrlp-funky {
nnoremap <Leader>fu :CtrlPFunky<Cr>
" narrow the list down with a word under cursor
nnoremap <Leader>fU :execute 'CtrlPFunky ' . expand('<cword>')<Cr>
let g:ctrlp_funky_syntax_highlight = 1
let g:ctrlp_extensions = ['funky']
" }

