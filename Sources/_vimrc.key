" Keyboard Config {@{
" 通用快捷键，保证相同的功能用相同的快捷键 {@{
" 上下分屏，水平排列，并是/否跳转
let hsplit  ="hsp"   " short for 'h'
let shsplit ="shsp"  " short for 'sh'

" 左右分屏，垂直排列，并是/否跳转
let vsplit ="vsp"    " short for 'v'
let svsplit ="svsp"  " short for 'sv'

" 不分屏直接打开文件，并是/否跳转
let open  ="o"
let sopen ="so"

" 在新标签页中打开
let tab ="tb"

" 切换工作目录
let cwd ="cd"

" 打开菜单
let menu = "me"

" 新建书签
let NewBookMark = "nbm"

" 删除书签
let DeleteBookMark = "dbm"

" 退出
let quit = "qu"

" 全屏显示
let FullScreen = "fs"

" 帮助
let help = "he"

" 刷新
let refresh = "re"

" 打开文件搜索
let fsearch = "ff"
" 全局搜索
let gfsearch = "gff"
" 当前目录搜索
let dfsearch = "dff"

" 打开字符串搜索
let ssearch = "sf"
" 全局搜索
let gssearch = "gsf"
" 当前目录搜索
let dssearch = "dsf"
" 当前文件搜索
let fssearch = "fsf"

" buffer
" <leader>b*

" codes
" <leader>c*

" file
" <leader>f*
" }@}

" defined <leader>
let mapleader =";"

" Vim's Function {@{
" 文档操作 {@{
" 设置快捷键将选中文本块复制至系统剪贴板
vnoremap <leader>sy "+y

" 设置快捷键将系统剪贴板内容粘贴至 vim
nmap <leader>sp "+p

" 定义快捷键关闭当前分割窗口
nmap <leader>fq :q<CR>
nmap <leader>fqa :qa<CR>

" 不做任何保存，直接退出 vim
nmap <leader>fQ :q!<CR>
nmap <leader>fQA :qa!<CR>

" 定义快捷键保存当前窗口内容
nmap <leader>fw :w<CR>
nmap <leader>fwa :wa<CR>
nmap <leader>fwq :wq<CR>

" 定义快捷键保存所有窗口内容并退出 vim
nmap <leader>fwqa :wa<CR>:q<CR>

" 打开当前文件所在位置
nmap <leader>fo <ESC>:call OpenFileLocation()<CR>

" 定义快捷键在结对符之间跳转
nmap <leader>m %

" 定义快捷键到行首和行尾
nmap <leader>lb 0
nmap <leader>le $

" 用空格键来开关代码折叠
nnoremap <leader><space> @=((foldclosed(line('.')) < 0) ? 'zc' : 'zo')<CR>

" 打开/关闭所有折叠
nnoremap <leader><space>o zR
nnoremap <leader><space>c zM

" 跳转到下/上一个折叠
nnoremap <leader><space>j zj
nnoremap <leader><space>k zk

" TODO: does't work, use vim-asterisk replace
" Search for selected text.
" http://vim.wikia.com/wiki/VimTip171
" let s:save_cpo = &cpo | set cpo&vim
" if !exists('g:VeryLiteral')
"   let g:VeryLiteral = 0
" endif
" function! s:VSetSearch(cmd)
"   let old_reg = getreg('"')
"   let old_regtype = getregtype('"')
"   normal! gvy
"   if @@ =~? '^[0-9a-z,_]*$' || @@ =~? '^[0-9a-z ,_]*$' && g:VeryLiteral
"     let @/ = @@
"   else
"     let pat = escape(@@, a:cmd.'\')
"     if g:VeryLiteral
"       let pat = substitute(pat, '\n', '\\n', 'g')
"     else
"       let pat = substitute(pat, '^\_s\+', '\\s\\+', '')
"       let pat = substitute(pat, '\_s\+$', '\\s\\*', '')
"       let pat = substitute(pat, '\_s\+', '\\_s\\+', 'g')
"     endif
"     let @/ = '\V'.pat
"   endif
"   normal! gV
"   call setreg('"', old_reg, old_regtype)
" endfunction
" vnoremap <silent> * :<C-U>call <SID>VSetSearch('/')<CR>/<C-R>/<CR>
" vnoremap <silent> # :<C-U>call <SID>VSetSearch('?')<CR>?<C-R>/<CR>
" vmap <kMultiply> *
" nmap <silent> <Plug>VLToggle :let g:VeryLiteral = !g:VeryLiteral
"   \\| echo "VeryLiteral " . (g:VeryLiteral ? "On" : "Off")<CR>
" if !hasmapto("<Plug>VLToggle")
"   nmap <unique> <Leader>vl <Plug>VLToggle
" endif
" let &cpo = s:save_cpo | unlet s:save_cpo
" }@}

" 窗口操作 {@{
" 跳转至右方的窗口
nnoremap <leader>lw <C-W>l

" 跳转至左方的窗口
nnoremap <leader>hw <C-W>h

" 跳转至上方的子窗口
nnoremap <leader>kw <C-W>k

" 跳转至下方的子窗口
nnoremap <leader>jw <C-W>j

" 依次遍历子窗口
nnoremap <leader>nw <C-W><C-W>

" 跳转到最左上角的窗口
nnoremap <leader>tw <C-W>t

" 跳转到最右下角的窗口
nnoremap <leader>bw <C-W>b

" 跳转到前一个访问的窗口
nnoremap <leader>pw <C-W>p

" 移动窗口至屏幕底端，并占用全部宽度
nmap <leader>wj <C-W>J

" 移动窗口至屏幕顶端，并占用全部宽度
nmap <leader>wk <C-W>K

" 移动窗口至屏幕左端，并占用全部高度
nmap <leader>wh <C-W>H

" 移动窗口至屏幕右端，并占用全部高=
nmap <leader>wl <C-W>L

" 调整窗口大小
nmap <leader>ws3 :resize +16<CR>
nmap <leader>ws4 :resize -16<CR>
nmap <leader>ws1 :vertical resize +16<CR>
nmap <leader>ws2 :vertical resize -16<CR>

" 微调窗口大小
nmap <leader>w1 <C-W>>
nmap <leader>w2 <C-W><
nmap <leader>w3 <C-W>+
nmap <leader>w4 <C-W>-

" 将当前窗口的宽度调到最大
nmap <leader>w[ <C-W>|

" 将当前窗口的宽度调到最小
nmap <leader>w] <C-W>1|

" 让所有窗口调整至相同尺寸
nmap <leader>w' <C-W>=

" 关闭当前窗口
nmap <leader>wq <C-W>c

" 关闭其它窗口
nmap <leader>wqo <C-W>o
" }@}

" 标签操作 {@{
" 新建标签
nmap <leader>tac :tabnew<CR>

" 关闭标签
nmap <leader>taq :tabc<CR>

" 在新标签中打开当前缓冲区中的文件
nmap <leader>tao :tab split<CR>

" 跳转到下/上一个标签, 标准模式下gt gT可以直接在tab之间切换
nmap <leader>tan :tabn<CR>
nmap <leader>tap :tabp<CR>

" 跳转到第一个标签
nmap <leader>taf :tabfirst<CR>

" 跳转到最后一个标签
nmap <leader>tal :tablast<CR>

" 移动标签
"nmap <leader>tm :tabm 1

" 显示标签列表
nmap <leader>tas :tabs<CR>
" }@}

" terminal操作 {@{
" 打开terminal窗口
nnoremap <leader>tec :ter ++curwin<CR>
" 进入terminal窗口normal模式
if IsWindows()
tnoremap <ESC><ESC> <C-\><C-N>
else
tnoremap <ESC><ESC> <C-W>N
end
" 隐藏terminal窗口
tnoremap <ESC>h <C-W>:hide<CR>
" 关闭terminal窗口
tnoremap <ESC>q <C-W>:quit!<CR>
" }@}

" buffer操作 {@{
" 新建一个空buffer
nmap <leader>bc :enew<CR>
" 新建一个水平排列的空buffer
nmap <leader>bch :new<CR>
" 新建一个垂直排列的空buffer
nmap <leader>bcv :vnew<CR>
" 退出当前buffer
nmap <leader>bq :bd<CR>
" 下一个buffer
nnoremap <leader>bn :bn<CR>
" 前一个buffer
nnoremap <leader>bp :bp<CR>
" 之前所在的buffe
nnoremap <leader>bl :b#<CR>
" 关闭所有非当前buffer
command! BQuitOthers call BufQuitOthers()
function! BufQuitOthers()
   let l:currentBufNum   = bufnr("%")
   let l:alternateBufNum = bufnr("#")
   for i in range(1,bufnr("$"))
     if buflisted(i)
       if i!=l:currentBufNum
         execute("bdelete ".i)
       endif
     endif
   endfor
endfunction
map <leader>bqo :BQuitOthers<cr>
" }@}

" 切换当前目录为正在编辑的文件所在目录
nnoremap <silent><leader>cd :cd %:p:h<CR>
" }@}

" Plugins's Function {@{
" NERDTree {@{
" https://github.com/scrooloose/nerdtree/blob/master/doc/NERDTree.txt
" 打开/关闭NERDTree
nmap <leader>nt :NERDTreeToggle<CR>

" 将NERDTree定位到当前文件的目录
nmap <leader>nf :NERDTreeFind<CR>

" 将当前所在node加入书签
nmap <leader>nbm :Bookmark<CR>

let g:NERDTreeMapActivateNode  =open
let g:NERDTreeMapPreview       =sopen
let g:NERDTreeMapOpenSplit     =hsplit
let g:NERDTreeMapPreviewSplit  =shsplit
let g:NERDTreeMapOpenVSplit    =vsplit
let g:NERDTreeMapPreviewVSplit =svsplit
let g:NERDTreeMapOpenInTab     =tab
let g:NERDTreeMapChdir         =cwd
let g:NERDTreeMapMenu          =menu
let g:NERDTreeMapQuit          =quit
let g:NERDTreeMapToggleZoom    =FullScreen
let g:NERDTreeMapHelp          =help
let g:NERDTreeMapRefreshRoot   =refresh
" }@}

" vim-fswitch {@{
" *.cpp 和 *.h 间切换
nmap <silent><leader>sw :FSHere<cr>
" VAX shortcut styles
nnoremap <A-o> :FSHere<cr>
" }@}

" YouCompleteMe {@{
" 转到定义, 使用gutentags_plus代替
" nnoremap <A-g> :YcmCompleter GoToDefinitionElseDeclaration<CR>
" }@}

" Slimv {@{
nmap <leader>s ,
nmap <leader>sme ,,
" }@}

" Ack {@{
" https://github.com/mileszs/ack.vim/blob/master/doc/ack.txt
" https://blog.csdn.net/Demorngel/article/details/71147697
"map <leader>ssearch :Ack<space>
"map <leader>sf :Ack!<space>
" }@}

" CtrlSF {@{
" https://github.com/dyng/ctrlsf.vim/blob/master/doc/ctrlsf.txt
" https://www.cnblogs.com/yuehq/p/4067817.html
nmap <leader>sf :CtrlSF<space>
nmap <leader>sft :CtrlSFToggle<cr>
vmap <leader>sfv <Plug>CtrlSFVwordExec
nmap <leader>sfc <Plug>CtrlSFCwordPath
nmap <leader>sfl <Plug>CtrlSFPwordPath
" }@}

" Ale {@{
" https://github.com/w0rp/ale/blob/master/doc/ale.txt
" 普通模式下，sp前往上一个错误或警告，sn前往下一个错误或警告
nmap sp <Plug>(ale_previous_wrap)
nmap sn <Plug>(ale_next_wrap)
" <leader>s触发/关闭语法检查
nmap <leader>s :ALEToggle<CR>
" <leader>d查看错误或警告的详细信息
nmap <leader>d :ALEDetail<CR>
" }@}
" }@}
" }@}
